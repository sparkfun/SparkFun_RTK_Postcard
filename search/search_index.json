{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>This is just a placeholder file for the webpage re-direct. All the content for this section is actually in the <code>introduction.md</code> file.</p>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":""},{"location":"hardware_assembly/#usb-programming-uart1","title":"USB Programming (<code>UART1</code>)","text":"<p>The USB connection can be utilized for serial communication and configuring the LG290P GNSS module. Users only need to connect their RTK Postcard to a computer, using a USB-C cable.</p> <p></p> <p>The RTK Postcard with USB-C cable being attached.</p> <p>Default Baud Rate</p> <p>The default baud rate of the UART ports on the LG290P is 460800bps.</p>"},{"location":"hardware_assembly/#gnss-antenna","title":"GNSS Antenna","text":"<p>In order to receive GNSS signals, users will need to connect a compatible antenna. For the best performance, we recommend users choose an active, multi-band GNSS antenna and utilize a low-loss cable.</p> Antenna Specifications <ul> <li>Passive antennas are not recommended for the LG290P GNSS module.</li> <li>To mitigate the impact of out-of-band signals, utilize an active antenna whose SAW filter is placed in front of the LNA in the internal framework.<ul> <li>DO NOT select and antenna with the LNA placed in the front.</li> </ul> </li> <li>There is no need to inject an external DC voltage into the SMA connector for the GNSS antenna. Power is already provided from the LG290P module for the LNA of an active antenna.</li> </ul> <p></p> <p>A compact, helical GNSS antenna attached to the SMA connector on the RTK Postcard.</p> <p></p> <p>A GNSS survey antenna attached to the SMA connector on the RTK Postcard.</p>"},{"location":"hardware_assembly/#jst-connector-uart3","title":"JST Connector (<code>UART3</code>)","text":"<p>The JST connector on the Quad-band GNSS RTK board, breaks out the <code>UART3</code> port of the LG290P GNSS module. In most circumstances, users will utilize the JST connector to interface with one of our radios to transmit or receive RTK correction data.</p> <p></p> <p>The Telemetry Radio v3 connected to the RTK Postcard.</p> <p>When connecting the RTK Postcard to other products, users should be aware of the pin connections between the devices. The table below, details the pin connections of the locking JST connector on the RTK Postcard.</p> Pin Number      **1**     *(Left Side)*  2 3 4 Label VCC TX3 RX3 GND Function **Voltage Output**     - **Default: 3.3V**     - 3.3V or 5V  `UART3` - Receive `UART3` - Transmit Ground <p>Default Baud Rate</p> <p>The default baud rate of the UART ports on the LG290P is 460800bps.</p>"},{"location":"hardware_assembly/#radio-transceivers","title":"Radio Transceivers","text":"<p>We have designed the locking JST connector to be plug-n-play with the following devices and cables. However, for the SiK Telemetry Radio v3, users should modify the <code>VSEL</code> jumper (1) on the back of the board to enable a 5V output on the <code>VCC</code> pin. Below, is a table summarizing the pin connections of the radios.</p> <ol> <li>While the SiK Telemetry Radio v3 may function with a 3.3V input, their specifications stipulate that a 5V power supply be provided.</li> </ol> Pin Number      **1**     *(Left Side)*  **2** **3** **4** **5**      **6**     *(Right)*  Label 5V      RX - SiK     RXI - LoRaSerial       TX - SiK     TXO - LoRaSerial  CTS RTS GND Function **Voltage Input**     - SiK: 5V     - LoRaSerial: 3.3 to 5V (1)  UART - Receive UART - Transmit      Flow Control     *Clear-to-Send*       Flow Control     *Ready-to-Send*  Ground Radio Pin Connections <p>As documented in the LoRaSerial product manual, the pin connections between a host system (i.e. RTK Postcard) and the LoRaSerial radio is outlined in the image below.</p> <p>  The pin connections between a radio and the RTK Postcard.  </p> <p>However, the flow control pins (<code>CTS</code> and <code>RTS</code>) are not available on the RTK Postcard. Therefore, when connecting either of the radios, the pin connections should follow the table below:</p> <p> Board RX TX GND Radio TX RX GND </p> Radio Transceivers and Cables <p>Default Baud Rate</p> <p>The baud rate for these radios are configured by the <code>SERIAL_SPEED</code> parameter. The default configuration is <code>SERIAL_SPEED</code>: 57600bps.</p> <ul> <li> <p> <p>SiK Telemetry Radio V3 - 915MHz, 100mW WRL-19032</p> <li> <p> <p>SparkFun LoRaSerial Kit - 915MHz (Enclosed) WRL-20029</p> <li> <p> <p>JST-GHR-04V to JST-GHR-06V Cable - 1.25mm pitch CAB-17239</p> <li> <p> <p>GHR-04V-S to GHR-06V-S Cable - 100mm CAB-17854</p>"},{"location":"hardware_assembly/#breakout-pins","title":"Breakout Pins","text":"<p>The PTH pins on the Quad-band GNSS RTK board are broken out into 0.1\"-spaced pins on the outer edges of the board.</p> New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide.</p> <ul> <li> <p> <p>How to Solder: Through-Hole Soldering</p> <ul> <li> <p>Headers</p> <p>When selecting headers, be sure you are aware of the functionality you require.</p> <p>  Soldering headers to the RTK Postcard.  </p> </li> <li> <p>Hookup Wires</p> <p>For a more permanent connection, users can solder wires directly to the board.</p> <p>  Soldering wires to the RTK Postcard.  </p> </li> </ul>"},{"location":"hardware_overview/","title":"Hardware Overview","text":""},{"location":"hardware_overview/#design-files","title":"Design Files","text":"<p>The SparkFun RTK Postcard board's dimensions, pin layout, and connectors are similar to our very popular SparkFun GPS-RTK-SMA Breakout - ZED-F9P (Qwiic) and SparkFun Quadband GNSS RTK Breakout - LG290P (Qwiic). The board features multiple UART ports, which are accessible through the USB-C connector, PTH pins, and 4-pin locking JST connector. Users can also interface with the board through the 19 PTH pins that are broken out around the edge of the board. For the GNSS antenna, an SMA antenna connector is provided on the edge of the board; additionally, users can rework the board to utilize the u.fl connector instead. We also provide two 4-pin JST Qwiic connectors for future use, to operate the board as a peripheral device.</p> <ul> <li> <p>KiCad primary logo Design Files</p> <ul> <li> Schematic</li> <li> KiCad Files</li> <li> STEP Files<ul> <li> RTK Postcard</li> <li> Enclosure </li> </ul> </li> <li> Board Dimensions:<ul> <li>1.70\" x 1.70\" (43.2mm x 43.2mm)</li> <li>Four mounting holes:<ul> <li>4-40 screw compatible</li> </ul> </li> </ul> </li> </ul> </li> <li> 3D ModelDimensions RTK Postcard <p> <p>Download the <code>*.step</code> File</p> Enclosure <p> <p>Download the <code>*.step</code> File</p> Manipulate 3D Model Controls Mouse Touchscreen Zoom Scroll Wheel 2-Finger Pinch Rotate Left-Click &amp; Drag 1-Finger Drag Move/Translate Right-Click &amp; Drag 2-Finger Drag <p>  Dimensions of the RTK Postcard.  </p> Need more measurements? <p>For more information about the board's dimensions, users can download the KiCad files for this board. These files can be opened in KiCad and additional measurements can be made with the measuring tool.</p> <p> KiCad - Free Download!</p> <p>KiCad is free, open-source CAD program for electronics. Click on the button below to download their software. (*Users can find out more information about KiCad from their website.)</p> <p> Download KiCad primary logo </p>  Measuring Tool <p>This video demonstrates how to utilize the dimensions tool in KiCad, to include additional measurements:</p> <p> </p>"},{"location":"hardware_overview/#usb-c-connector","title":"USB-C Connector","text":"<p>The USB connector is provided to power the board and communicate with either the LG290P GNSS receiver or ESP32 microcontroller. For most users, it will be the primary method for interfacing with the RL Postcard.</p> <p></p> <p>USB-C connector on the RTK Postcard.</p>"},{"location":"hardware_overview/#ch342-dual-uart-converter","title":"CH342 Dual UART Converter","text":"<p>The CH342 serial-to-USB converter allows users to interface with the <code>UART1</code> port of the LG290P GNSS module and <code>UART0</code> port of the ESP32-Pico module through the USB-C connector. To utilize the CH342, users may need to install a USB driver, which can be downloaded from the manufacturer website.</p> Tip - USB Drivers <ul> <li> <p> Windows</p> <p> Download Page for <code>CH343SER.EXE</code></p> </li> <li> <p> MacOS</p> <p> Download Page for <code>CH341SER_MAC.ZIP</code></p> </li> </ul> <p>Linux</p> <p>A USB driver is not required for Linux based operating systems.</p> <p></p> <p>The <code>UART</code> channels of the CH342 serial-to-USB converter.</p> <p>Once the USB driver is installed, two virtual <code>COM</code> ports will be emulated and can be utilized as standard <code>COM</code> ports to access the modules:</p> <ul> <li>ESP32 - Users should select <code>COM</code> port labeled with <code>Channel A</code> (often the lower enumeration).</li> <li> <p>LG290P - Users should select <code>COM</code> port labeled with <code>Channel B</code> (often the higher enumeration).</p> UART Settings <ul> <li> <p>ESP32</p> <p>With the RTK Everywhere firmware, the <code>UART0</code> port of the ESP32 is configured with the following settings:</p> <ul> <li>Baudrate: 115200bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> </ul> </li> <li> <p>LG290P</p> <p>With the RTK Everywhere firmware, the <code>UART2</code> port of the LG290P is configured with the following settings:</p> <ul> <li>Baudrate: 460800bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> </ul> Default Configuration <p>The UART ports of the LG290P are configured with the following default settings:</p> <ul> <li>Baudrate: 460800bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> <li>Protocols:<ul> <li><code>NMEA 0183</code></li> <li><code>RTCM 3.x</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"hardware_overview/#power","title":"Power","text":"<p>The RTK Postcard only requires 3.3V to power the board's primary components. The simplest method to power the board is through the USB-C connector. Alternatively, the board can also be powered through the other connectors and PTH pins.</p> <p></p> <p>RTK Postcard's power connections.</p> <p>Below, is a general summary of the power circuitry for the board:</p> <ul> <li><code>5V</code> - The voltage from the USB-C connector, usually 5V.<ul> <li>Can be utilized as the primary power source for the entire board.</li> <li>When connected to the Portability Shield, this pin used to provide power between the boards. (1)</li> </ul> </li> <li><code>3V3</code> - 3.3V power rail, which powers the ESP32 Pico-Mini module, LG290P GNSS module, backup battery, and LEDs.<ul> <li>Power can also be distributed to/from any of the JST connectors (Qwiic or <code>UART3</code>) or the <code>3V3</code> PTH pin.<ul> <li>For power that is supplied through these connections, the LG290P has the tightest voltage supply requirement of 3.15\u20133.45V.</li> </ul> </li> <li>A regulated 3.3V is supplied by the RT9080, when powered from the <code>5V</code> PTH pin or USB connector<ul> <li>Input Voltage Range: 3.0 to 5.5V (2)</li> <li>The RT9080 LDO regulator can source up to 600mA.</li> </ul> </li> </ul> </li> <li><code>3V3_EN</code> - Controls the power output form the RT9080 voltage regulator.<ul> <li>By default, the pin is pulled-up to 5V and to enable the RT9080 output voltage.</li> </ul> </li> <li><code>VCC</code> - The voltage from the locking JST-GH connector, which is controlled by the <code>VSEL</code> jumper (3).<ul> <li>Used to power an external radio to send or receive RTK corrections.</li> </ul> </li> <li><code>GND</code> - The common ground or the 0V reference for the voltage supplies.</li> </ul> <ol> <li> <p>Details</p> <p>When 5V is provided to the RTK Postcard, it will supply power to the Portability Shield and charge the LiPo battery (if connected). To operate properly when charging the battery, the power switch behind the OLED display of the Portability Shield should be in the <code>Off</code> position.</p> <p>When powered by a LiPo battery, users must toggle the power switch behind the OLED display of the Portability Shield to the <code>On</code> position. This will allow the battery power to be provided to the RTK Postcard through the <code>5V</code> pin; and then to its RT9080 LDO.</p> <p>Protection diodes are utilized on the boards to independently prevent current feedback and protect the power sources from each other.</p> </li> <li> <p>Brown Out Voltage</p> <p>The supply voltage of a LiPo battery will decrease as it is drained. However, before the battery can reach its critical UVLO threshold (~2.8V), the LG290 GNSS module with begin to brown out from an in-use supply voltage of 3.05-3.10V from a battery.</p> <p>Battery Capacity</p> <p>When selecting a LiPo battery for any combination of the RTK Postcard, Portability Shield, and/or connected radio, users should be aware of the peak current draw of their setup. In theory, most standard LiPo batteries have a maximum discharge rate of 1C (based on the battery capacity).</p> \\[ 1C = \\frac{(1 * Capacity)}{hour} \\] <p>However, as a battery ages, users may find the effective capacity and discharge rate to degrade to 80% of its original specifications.</p> <p>Example</p> <p>For example, a LiPo battery with a 400mAh capacity will have a maximum discharge rate of 400mA. However, over time, users may notice its effective use diminish to 320mAh and 320mA respectively.</p> </li> <li> <p>By default, the <code>VSEL</code> jumper is configured to utilize the 3.3V power rail; however, it can be connected to the 5V power rail instead.</p> <p>Portability Shield</p> <p>When utilizing the 5V power rail of the RTK Postcard, power may be supplied from the LiPo battery from the Portability Shield. This should be taken into consideration when connecting an external radio for RTK corrections.</p> </li> </ol> <p>Info</p> <p>For more details, users can reference the schematic and the datasheets of the individual components on the board.</p> <p>Portability Shield</p> <p>When used in conjunction with the Portability Shield, users should be aware of the following:</p> <ul> <li>To charge the battery, users must provide adequate power through the <code>5V</code> pin. This is most easily done by powering the boards from the USB-C connector.</li> <li>When operating the boards with the battery power, users must ensure that the switch behind the OLED display is in the <code>On</code> position. This will allow the battery power to feedback to the RTK Postcard through the <code>5V</code> pin; and over to the RT9080 LDO to provide a regulated 3.3V to its primary components.</li> </ul>"},{"location":"hardware_overview/#backup-battery","title":"Backup Battery","text":"<p>While charged, the backup battery allows the GNSS module to hot/warm start with valid ephemeris data (time and GNSS orbital trajectories) that was stored.</p> <p>Time to First Fix:</p> <ul> <li>Cold Start: 28s</li> <li>Warm Start: 28s</li> <li>Hot Start: 1.7s</li> </ul>"},{"location":"hardware_overview/#espressif-logo-esp32-pico-mini","title":"Espressif logo\u00a0 ESP32 Pico-Mini","text":"<p>The brains of the RTK Postcard is an ESP32 Pico-Mini module. The Espressif series of ESP32 modules are a versatile, compact MCU modules with WiFi, BT, and BLE capabilities that target a wide variety of applications. At the core of the ESP32 Pico-Mini module is the ESP32-PICO-V3-02, a System-in-Package device, along with an integrated 8 MB SPI flash, 2 MB SPI PSRAM, and 40 MHz oscillator.</p> <p></p> <p>The ESP32 Pico-Mini module on the RTK Postcard.</p> General Features <ul> <li>Electrical Characteristics:<ul> <li>Operating Voltage: 3.0 - 3.6V</li> <li>Current Consumption:<ul> <li>RF Operation: 368mA (peak)</li> <li>Normal Operation: 20-31mA</li> <li>Light-Sleep: 0.8mA</li> <li>Deep-Sleep: 5\u00b5A</li> </ul> </li> </ul> </li> <li>Xtensa\u00ae Dual-Core 32-bit LX6 Microprocessor (up to 240MHz)<ul> <li>448KB of ROM and 520KB SRAM</li> <li>8MB SPI Flash</li> <li>2MB PSRAM</li> <li>16KB SRAM in RTC</li> </ul> </li> <li>Operating Temperature: -40 to 85\u00b0C</li> </ul> <ul> <li>PCB antenna</li> <li>Wi\u00adF 802.11b/g/n<ul> <li>Bit Rate: up to 150Mbps (802.11n)</li> <li>Frequency Range: 2412 - 2484MHz</li> </ul> </li> <li>Bluetooth<ul> <li>Bluetooth v4.2 Specification:<ul> <li>BR/EDR</li> <li>Bluetooth LE</li> </ul> </li> <li>Transmitter Class: 1, 2, and 3</li> </ul> </li> <li>27 GPIO (including strapping pins)     -</li> <li>Supported Peripherals:<ul> <li>SD card, UART, SPI, SDIO, I2C, LED PWM, Motor PWM, I2S, IR, pulse counter, GPIO, capacitive touch sensor, ADC, DAC, TWAI\u00ae (compatible with ISO 11898-1, i.e. CAN Specification 2.0), Ethernet MAC</li> </ul> </li> </ul> Warning <p>Users should be aware of the following nuances and details of this microcontroller</p> <ul> <li>The ESP32 Pico-Mini is only compatible with 2.4GHz WiFi networks; it will not work on the 5GHz bands.</li> <li>For details on the boot mode configuration, please refer to section 3.3 Strapping Pins of the ESP32 SoC datasheet.</li> </ul> RTK Everywhere Firmware <p>The RTK Postcard comes pre-programmed with latest version of our RTK Everywhere firmware. However, users are free to reprogram the board as they see fit. For more details about the RTK Everywhere firmware, users can refer to the user manual.</p> Firmware Download Mode <p>Users can manually force the board into the serial bootloader with the BOOT button. Please, refer to the Boot Button section below for more information.</p> Power Modes <p>The ESP32 Pico-Mini module has various power modes:</p> <ul> <li>Active -  The chip radio is powered on. The chip can receive, transmit, or listen.</li> <li>Modem Sleep - The CPU is operational and the clock is configurable. The Wi-Fi/Bluetooth   baseband and radio are disabled.</li> <li>Light Sleep - The CPU is paused. The RTC memory and RTC peripherals, as well as the ULP   coprocessor are running.</li> <li>Deep Sleep - Only the RTC memory and RTC peripherals are powered on. The ULP coprocessor is functional.</li> <li>Hibernation - Only one RTC timer on the slow clock and certain RTC GPIO   active.</li> <li>Off - Chip is powered off.</li> </ul> <p>For more information on the power management of the ESP32 Pico-Mini module, pleaser refer to Section 4.4 and Tables: 8 and 9 of the ESP32 Pico-Mini module datasheet.</p>"},{"location":"hardware_overview/#peripherals-and-io-pins","title":"Peripherals and I/O Pins","text":"<p>The ESP32 Pico-Mini module features 27 multifunctional GPIO pins, of which, 11 I/O pins broken out into PTH pins on the RTK Postcard. Meanwhile, others are utilized to interface with the LG290P GNSS receiver or other components on the board (i.e. USB connector, Qwiic connector, etc.). All of the RTK Postcard PTH pins have a .1\" pitch spacing for standard headers and their pin layout is compatible with our Portability Shield.</p> <p></p> <p>The peripheral interfaces and I/O pins on the RTK Postcard.</p> <p>Interfaces:</p> <ul> <li>UART (x2)</li> <li>SPI</li> <li>I<sup>2</sup>C (x2)</li> <li>Event Trigger<sup>4</sup></li> <li>RTK Signal</li> <li>Interrupt</li> <li>PPS Timing Signal</li> <li>LG290P Module Reset</li> </ul> ESP32 GPIO PTH Pin LG290P IO Other <code>GPIO 7</code> <code>SDA0</code> <code>I2C_SDA</code> <code>GPIO 20</code> <code>SCL0</code> <code>I2C_SCL</code> <code>GPIO 13</code> Qwiic <code>SDA</code> <code>GPIO 19</code> Qwiic <code>SCL</code> <code>GPIO 21</code> <code>TXD2</code> <code>GPIO 22</code> <code>RXD2</code> <code>GPIO 33</code> <code>RST</code> <code>RESET_N</code> <code>GPIO 34</code> <code>RTK</code> <code>RTK_STAT</code> LED <code>RTK</code> <code>GPIO 36</code> <code>PPS</code> <code>1PPS</code> LED <code>PPS</code> <code>GPIO 8</code> <code>EVENT</code> <code>EVENT</code> <code>GPIO 32</code> <code>SCK</code> <code>GPIO 25</code> <code>POCI</code> <code>GPIO 26</code> <code>PICO</code> <code>GPIO 27</code> <code>CS</code> <code>GPIO 14</code> <code>AOI</code> <code>GPIO 4</code> LED <code>BT</code> <code>GPIO 0</code> LED <code>STAT</code> General Capabilities <p>With the pin multiplexing capabilities of the ESP32 SoC, various pins can have several functionalities. For more technical specifications on the I/O pins, please refer to the ESP32 SoC datasheet.</p> <ul> <li>18x 12-bit analog to digital converter (ADC) channels</li> <li>3x UARTs (only two are configured by default in the Arduino IDE, one UART is used for bootloading/debug)</li> <li>3x SPI (only one is configured by default in the Arduino IDE)</li> <li>2x I<sup>2</sup>C (only one is configured by default in the Arduino IDE)</li> <li>2x digital-to-analog converter (DAC) channels</li> <li>16x 20-bit PWM outputs</li> <li>10x Capacitive Touch Inputs</li> </ul> <p>Warning</p> <p>Users should be aware of the following nuances of the ESP32 Pico-Mini module:</p> <ul> <li>\u26a1 All the GPIO are 3.3V pins.<ul> <li>The I/O pins are not 5V-tolerant! To interface with higher voltage components, a logic level adapter is recommended.</li> </ul> </li> <li>\u26a1  There are electrical limitations to the amount of current that the ESP32 Pico-Mini module can sink or source. For more details, check out the ESP32 Pico-Mini module datasheet.</li> <li>There are some limitations to the ADC performance, see the Note from the ADC Characteristics section of the ESP32 SoC datasheet.</li> </ul> Programming in Arduino <p>To program the ESP32 Pico-Mini module in the Arduino IDE, users should select the ESP32 &gt; ESP32 Dev Module from the Board Manager list. Users should also be aware that not all of the features, listed above, will be available in the Arduino IDE. When programming the module with the Arduino IDE, only the following features are available for the board:</p> <ul> <li>Only one I<sup>2</sup>C bus is defined.</li> <li>Only two UART interfaces are available.<ul> <li>UART (USB): <code>Serial</code></li> <li><code>RX</code>/<code>TX</code> Pins: <code>Serial1</code></li> </ul> </li> <li>Only one SPI bus is defined.</li> </ul> <p>For the full capabilities of the ESP32, the Espressif IDF should be utilized.</p> <p>General Functions</p> <p>For digital pins, users will need to declare the <code>pinMode()</code> (link) in the setup of their sketch (programs written in the Arduino IDE) for the pins used.</p> <ul> <li> <p>Input</p> <p>When configured properly, an input pin will be looking for a <code>HIGH</code> or <code>LOW</code> state. Input pins are high impedance and takes very little current to move the input pin from one state to another.</p> </li> <li> <p>Output</p> <p>When configured as an output the pin will be at a <code>HIGH</code> or <code>LOW</code> voltage. Output pins are low impedance; this means that they can provide a relatively substantial amount of current to other circuits.</p> </li> </ul> <p>Additional Functions</p> <p>There are several pins that have special functionality in addition to general digital I/O. These pins and their additional functions are listed in the tabs below. For more technical specifications on the I/O pins, you can refer to the schematic, ESP32 Pico-Mini module datasheet, ESP32 SoC datasheet, and documentation for the ESP32 Arduino core.</p> Analog PinsPWM &amp; Analog (DAC) PinsSerial PinsSPI PinsI<sup>2</sup>C Pins <p>The ESP32 module provides a 12-bit ADC input on eighteen of its I/O pins. This functionality is accessed in the Arduino IDE using the <code>analogRead(pin)</code> function. (*The available ADC pins are highlighted in the image below.)</p> <p>  Analog input pins on the RTK Postcard.  </p> <p>Tip</p> <p>To learn more about analog vs. digital signals, check out this great tutorial.</p> <ul> <li> <p> <p>Analog vs. Digital</p> <p>Arduino</p> <p>By default, in the Arduino IDE, <code>analogRead()</code> returns a 10-bit value. To change the resolution of the value returned by the <code>analogRead()</code> function, use the <code>analogReadResolution(bits)</code> function.</p> <p>The ESP32 module supports up to sixteen channels of 20-bit PWM (Pulse Width Modulation) outputs on any of its I/O pins. This is accessed in the Arduino IDE using the <code>analogWrite(pin, value)</code> function. (*Any I/O pin can be used for the PWM outputs; the available DAC pins, with true analog outputs, are highlighted in the image below.)</p> <p>  Any I/O pin can be a PWM output, but these are the DAC pins on the RTK Postcard.  </p> <p>Tip</p> <p>To learn more about pulse width modulation (PWM), check out this great tutorial.</p> <ul> <li> <p> <p>Pulse Width Modulation</p> <p>Arduino</p> <p>By default, in the Arduino IDE, <code>analogWrite()</code> accepts an 8-bit value. To change the resolution of the PWM signal for the <code>analogWrite()</code> function, use the <code>analogWriteResolution(bits)</code> function.</p> <p>The ESP32 module provides three UART ports. By default, the UART port for the USB connection (<code>Serial</code>) and the UART port (<code>Serial1</code>) to the LG290P GNSS receiver can be accessed through the Arduino IDE using the serial communication class.</p> <p>  Default UART ports on the RTK Postcard.  </p> <p>Tip</p> <p>To learn more about serial communication, check out this great tutorial.</p> <ul> <li> <p> <p>Serial Communication</p> <p>Arduino</p> <p>By default, in the Arduino IDE, the ESP32 Dev Module board definition supports:</p> <ul> <li><code>Serial</code> - UART (USB)</li> <li><code>Serial1</code> - Pins: <code>RX</code>/<code>TX</code> (<code>GPIO 21</code>/<code>GPIO 22</code>)</li> </ul> <p>Tip</p> <p>We have noticed that with the ESP32 Arduino core, <code>Serial.available()</code> does not operate instantaneously. This is due to an interrupt triggered by the UART, to empty the FIFO when the <code>RX</code> pin is inactive for two byte periods:</p> <ul> <li> <p>At 9600 baud, <code>hwAvailable</code> takes about 11 ms before the UART indicates that data was received from: <code>\\r\\nERROR\\r\\n</code>.</p> \\[ (bytes + 2) * 1ms = 11ms \\] </li> <li> <p>At 115200 baud, <code>hwAvailable</code> takes about 1 ms before the UART indicates that data was received from: <code>\\r\\nERROR\\r\\n</code>.</p> \\[ (bytes + 2) * .087ms = 1ms \\] </li> </ul> <p>For more information, please refer to this chatroom discussion.</p> <p>The ESP32 module provides three SPI buses. By default, in the Arduino IDE, the SPI class is configured to utilize pins <code>GPIO 32</code> (SCK), <code>GPIO 25</code> (POCI), <code>GPIO 26</code> (PICO), and <code>GPIO 27</code> (<code>SS</code>) for its chip select. In order to utilize the other SPI ports or objects, users will need to create a custom SPI object and declare which pins to access.</p> <p>  Default SPI bus connections on the RTK Postcard.  </p> <p>Tip</p> <p>To learn more about the serial peripheral interface (SPI) protocol, check out this great tutorial.</p> <ul> <li> <p> <p>Serial Peripheral Interface (SPI)</p> <p>Arduino</p> <p>By default, in the Arduino IDE, the ESP32 Dev Module board definition supports:</p> SCK <code>GPIO 32</code> (<code>SCK</code>) SDI or POCI <code>GPIO 25</code> (<code>MISO</code>) SDO or PICO <code>GPIO 26</code> (<code>MOSI</code>) CS* <code>GPIO 27</code> (<code>SS</code>) Signal Nomenclature <p>To comply with the latest OSHW design practices, we have adopted the new SPI signal nomenclature (SDO/SDI and PICO/POCI). The terms Master and Slave are now referred to as Controller and Peripheral. The <code>MOSI</code> signal on a controller has been replaced with <code>SDO</code> or <code>PICO</code>. Please refer to this announcement on the decision to deprecate the MOSI/MISO terminology and transition to the SDO/SDI naming convention.</p> <p>The ESP32 module module can support up to two I<sup>2</sup>C buses. By default, in the Arduino IDE, the Wire class is configured to utilize pins <code>GPIO 20</code> (SDA) and <code>GPIO 7</code> (SCL). These pins share the same I<sup>2</sup>C bus with the LG290P GNSS receiver, but not the Qwiic connector. In order to utilize another I<sup>2</sup>C port, users will need to create a custom Wire object and declare which pins to access.</p> <p>  Default I<sup>2</sup>C bus connections for the RTK Postcard.  </p> <p>Tip</p> <p>To learn more about the inter-integrated circuit (I<sup>2</sup>C) protocol, check out this great tutorial.</p> <ul> <li> <p> <p>I2C</p> <p>Arduino</p> <p>By default, in the Arduino IDE, the ESP32 Dev Module board definition supports:</p> SCL0 <code>GPIO 7</code> (<code>SCL</code>) SDA0 <code>GPIO 20</code> (<code>SDA</code>)"},{"location":"hardware_overview/#quectel-logo-lg290p-gnss","title":"Quectel logo\u00a0 LG290P GNSS","text":"<p>The centerpiece of the RTK Postcard, is the LG290P GNSS module from Quectel. The LG290P is a low-power, multi-band, multi-constellation GNSS receiver capable of delivering centimeter-level precision at high update rates. The built-in NIC anti-jamming unit provides professional-grade interference signal detection and elimination algorithms, which effectively mitigate against multiple narrow-band interference sources and significantly improves the signal reception performance in complex electromagnetic environments. With its performance advantages of high-precision and power consumption, this board is an ideal choice for high-precision navigation applications, such as intelligent robots, UAVs, precision agriculture, mining, surveying, and autonomous navigation.</p> <p></p> <p>The LG290P module on the RTK Postcard.</p>  ![QR code to product video](./assets/img/qr_code/quectel_video.png){ .qr width=100 }  General Features <ul> <li>Supply Voltage: 3.15 \u2013 3.45V</li> <li>Tracking Channels: 1040</li> <li>Concurrent signal reception: 5 + QZSS<ul> <li><code>L1</code>, <code>L2</code>, <code>L5</code>, <code>E6</code> frequency bands</li> </ul> </li> <li>Sensitivity:<ul> <li>Acquisition: -146dBm</li> <li>Tracking: -160dBm</li> <li>Reacquisition: -155dBm</li> </ul> </li> <li>Antenna Power: External or Internal</li> <li>GNSS Constellations and SBAS Systems:<ul> <li>USA: GPS + WASS</li> <li>Russia: GLONASS + SDCM</li> <li>EU: Galileo + EGNOS</li> <li>China: BDS + BDSDAS</li> <li>Japan: QZSS + MSAS</li> <li>India: NavIC + GAGAN</li> </ul> </li> <li>Accuracy of 1PPS Signal: 5ns (RMS)</li> <li>Update Rate:<ul> <li>Default: 10Hz</li> <li>Max: 20Hz</li> </ul> </li> </ul> <ul> <li>Time to First Fix (without AGNSS):<ul> <li>Cold Start: 28s</li> <li>Warm Start: 28s</li> <li>Hot Start: 1.7s</li> </ul> </li> <li>RTK Convergence Time: 5s</li> <li>Dynamic Performance:<ul> <li>Maximum Altitude: 10000m</li> <li>Maximum Velocity: 490m/s</li> <li>Maximum Acceleration: 4g</li> </ul> </li> <li>Built-in NIC anti-jamming unit</li> <li>Interfaces<ul> <li>UART (x3)<ul> <li>Baud Rate: 9600\u20133000000bps<ul> <li>Default: 460800bps</li> </ul> </li> <li>Protocol: <code>NMEA 0183</code>/<code>RTCM 3.x</code></li> </ul> </li> <li>SPI<sup>1</sup> (x1)</li> <li>I<sup>2</sup>C<sup>1</sup> (x1)</li> </ul> </li> <li>Operating temperature: -40\u00b0C to +85\u00b0C</li> <li>Footprint: 12.2mm \u00d7 16mm \u00d7 2.6mm</li> <li>Weight: ~0.9g</li> </ul> Supported Frequency Bands <p>The LG290P modules are multi-band, multi-constellation GNSS receivers. Below, is a chart illustrating the frequency bands utilized by all the global navigation satellite systems; along with a list of the frequency bands and GNSS systems supported by the LG290P GNSS module.</p> <p>  Frequency bands of the global navigation satellite systems. (Source: Tallysman)  </p> <p>Supported Frequency Bands:</p> <ul> <li>GPS: <code>L1 C/A</code>, <code>L1C</code><sup>2</sup>, <code>L5</code>, <code>L2C</code></li> <li>GLONASS: <code>L1</code>, <code>L2</code></li> <li>Galileo: <code>E1</code>, <code>E5a</code>, <code>E5b</code>, <code>E6</code></li> <li>BDS: <code>B1I</code>, <code>B1C</code>, <code>B2a</code>, <code>B2b</code>, <code>B2I</code>, <code>B3I</code></li> <li>QZSS: <code>L1 C/A</code>, <code>L1C</code><sup>2</sup>, <code>L5</code>, <code>L2C</code></li> <li>NavIC: <code>L5</code></li> <li>SBAS: <code>L1 C/A</code></li> <li>L-band PPP<sup>3</sup>:<ul> <li>PPP: <code>B2b</code></li> <li>QZSS: <code>L6</code></li> <li>Galileo HAS: <code>E6</code></li> </ul> </li> </ul> <p>Supported GNSS Constellations:</p> <ul> <li>GPS (USA)</li> <li>GLONASS (Russia)</li> <li>Galileo (EU)</li> <li>BDS (China)</li> <li>QZSS (Japan)</li> <li>NavIC (India)</li> </ul> <p>Supported SBAS Systems:</p> <ul> <li>WASS (USA)</li> <li>SDCM (Russia)</li> <li>EGNOS (EU)</li> <li>BDSBAS (China)</li> <li>MSAS (Japan)</li> <li>GAGAN (India)</li> </ul> <p>Info</p> <p>For a comparison of the frequency bands supported by the LG290P GNSS modules, refer to sections 1.2, 1.5, and 1.6 of the hardware design manual.</p> What are Frequency Bands? <p>A frequency band is a section of the electromagnetic spectrum, usually denoted by the range of its upper and lower limits. In the radio spectrum, these frequency bands are usually regulated by region, often through a government entity. This regulation prevents the interference of RF communication; and often includes major penalties for any interference with critical infrastructure systems and emergency services.</p> <p>  Frequency bands of the global navigation satellite systems. (Source: ESA)  </p> <p>However, if the various GNSS constellations share similar frequency bands, then how do they avoid interfering with one another? Without going too far into detail, the image above helps illustrate some of the characteristics, specific to the frequency bands of each system. With these characteristics in mind, along with other factors, the chart can help users to visualize how multiple GNSS constellations might co-exist with each other.</p> <p>For more information, users may find these articles of interest:</p> <ul> <li>GNSS signal</li> <li>GPS Signal Plan</li> <li>GLONASS Signal Plan</li> <li>GALILEO Signal Plan</li> </ul> GNSS Accuracy <p>The accuracy of the position reported from the LG290P GNSS module, can be improved based upon the correction method being employed. Currently, RTK corrections provide the highest level of accuracy; however, users should be aware of certain limitations of the system:</p> <ul> <li>RTK technique requires real-time correction data from a reference station or network of base stations.<ul> <li>RTK corrections usually come from RTCM messages that are signal specific (i.e. an RTK network may only provide corrections for specific signals; only <code>E5b</code> and not <code>E5a</code>).</li> </ul> </li> <li>The range of the base stations will vary based upon the method used to transmit the correction data.</li> <li>The reliability of RTK corrections are inherently reduced in multipath environments.</li> </ul> Correction Method Horizontal Vertical Velocity Standalone 0.7m~2.3' 2.5m~8.2' 3cm/s (0.108kph)~1.2in/s (0.067mph) RTK 0.8cm (+1ppm)~0.3\" 1.5cm (+1ppm)~.6\" RTK Corrections <p>To understand how RTK works, users will need a more fundamental understanding of the signal error sources.</p> <ul> <li> <p> <p>Real-Time Kinematics Explained</p> <li> <p> <p>What is Correction Data?</p>"},{"location":"hardware_overview/#peripherals-and-io-pins_1","title":"Peripherals and I/O Pins","text":"<p>The LG290P GNSS features several peripheral interfaces and I/O pins. Some of these are broken out as PTH pins on the RTK Postcard; whereas, others are broken out to their specific interface (i.e. USB connector, JST connector, etc.). Additionally, some of their connections are tied to other components on the board.</p> <p></p> <p>The peripheral interfaces and I/O pins on the RTK Postcard.</p> <p>Interfaces:</p> <ul> <li>UART (x3)</li> <li>SPI<sup>1</sup></li> <li>I<sup>2</sup>C<sup>1</sup></li> <li>Event Trigger<sup>4</sup></li> <li>Timing Signal</li> <li>RTK Signal</li> <li>Module Reset</li> </ul> UARTsPPS OutputRTKReset <p>The LG290P GNSS has three UART ports, which can be operated and configured separately.</p> <p>  The UART ports on the RTK Postcard.  </p> UART Settings <p>With the RTK Everywhere firmware, the UART ports of the LG290P are configured with the following baudrates:</p> UART Port Interface Baudrate (bps) <code>UART1</code> USB-C (CH342) 460800 <code>UART2</code> ESP32 460800 <code>UART3</code> JST-GH (Locking) 57600 Default Configuration <p>The UART ports of the LG290P are configured with the following default settings:</p> <ul> <li>Baudrate: 460800bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> <li>Protocols:<ul> <li><code>NMEA 0183</code></li> <li><code>RTCM 3.x</code></li> </ul> </li> </ul> Pin Connections <p>When connecting to the board's UART pins to another device, the pins should be connected based upon the flow of their data.</p> <p> Board RX TX GND UART Device TX RX GND </p> <code>UART1</code><code>UART2</code><code>UART3</code> <p><code>UART1</code> can only be accessed from the USB-C connector, through the CH342 serial-to-USB converter. For Windows and MacOS computers (1), a USB driver must be installed in order to communicate with the LG290P module through the CH342 converter. Once the USB driver is installed:</p> <ul> <li>Two virtual <code>COM</code> ports are emulated, which can be used as standard <code>COM</code> ports to access the ESP32 or the LG290P modules.</li> <li>Users should select <code>COM</code> port listed as <code>Channel B</code> to access the LG290P GNSS receiver.</li> </ul> <ol> <li>On Linux, the standard Linux CDC-ACM driver is suitable.</li> </ol> <p><code>UART2</code> is connected to the ESP32 Pico-Mini.</p> ESP32 LG290P IO21: <code>GPIO 21</code> <code>TXD2</code> IO22: <code>GPIO 22</code> <code>RXD2</code> <p><code>UART3</code> is available through the breakout PTH pins or the locking JST connector. The pin layout of the 4-pin locking JST connector is compatible with many of our serial radios and adapter cables.</p> UART Protocols <p>From the module, the PPS output signal is a 3.3V signal output that can be access through the SMA connector and/or the <code>PPS</code> PTH pin. The signal is also connected to the <code>PPS</code> LED, which can be used as a visual indicator for its operation.</p> <p>  The timing signal's outputs on the RTK Postcard.  </p> Jumpers <p>See the Jumpers section for more details.</p> <ul> <li>There is a jumper attached to the <code>PPS</code> PTH pin. When cut, it disconnects the pin from the PPS signal.</li> <li>There is a jumper attached to the <code>PPS</code> LED. For low power applications, the jumper can be cut to disable the <code>PPS</code> LED.</li> </ul> Use Case <ul> <li>Users could use this signal in conjunction with the event pins to synchronize two modules with each other.</li> <li>Users could use this signal to create their own Stratum 0 source for the NTP on a primary time server.</li> </ul> <p>The <code>RTK</code> PTH pin operates as both the <code>RTK_STAT</code> status indicator for the RTK positioning and <code>ANT_ON</code> power control for the external LNA or active antenna power. The pin is also connected to the <code>RTK</code> LED, which can be used as a visual indicator for its operation.</p> <p>  The RTK signal's outputs on the RTK Postcard.  </p> <code>RTK_STAT</code><code>ANT_ON</code> <p>In this configuration, the pin is set to a high level at startup.</p> <ol> <li>If the pin output is high, it indicates the module has entered the RTK fixed mode.</li> <li>If the pin output is low, it indicates that the module exited the RTK fixed mode.</li> <li>If the pin outputs an alternating pin level, it indicates that the module received the correct RTCM data and did not enter the RTK fixed mode.</li> </ol> <p>In this configuration, the pin is used to control the external LNA or active antenna power supply.</p> <ul> <li>When the pin is high, the antenna is powered.</li> <li>When the pin is low, the antenna is not powered.</li> </ul> Jumpers <p>See the Jumpers section for more details.</p> <ul> <li>There is a jumper attached to the <code>RTK</code> LED. For low power applications, the jumper can be cut to disable the <code>RTK</code> LED.</li> </ul> <p>The <code>RST</code> pin can be used to reset the LG290P module if it enters an abnormal state. To reset the GNSS module, the pin must be low for more than 100ms.</p> <p>  The <code>RST</code> pin on the RTK Postcard.  </p>"},{"location":"hardware_overview/#uart-protocols","title":"UART Protocols","text":"<p>By default, these UART ports are configured to transmit and receive <code>NMEA 0183</code> and/or <code>RTCM 3.x</code> messages. These messages are generally used for transmitting PNT data; and providing or receiving RTK corrections, respectively. Quectel also implements a system of proprietary messages (<code>PQTM</code>) for users to configure the LG290P that follows a data format similar to the <code>NMEA</code> protocol. The expected structure of these proprietary messages is shown below:</p> <p>  The data structure of Quectel messages for the <code>NMEA</code> protocol.  </p> NMEAPQTMRTCM <p>A full list of compatible <code>NMEA 0183</code> v4.11 messages, is provided in section 2.2. Standard Messages of the GNSS Protocol Specification manual. This protocol is used for outputting GNSS data, as detailed by the National Marine Electronics Association organization.</p> List of Standard NMEA Messages Message Type Mode Message Description RMC Output Recommended Minimum Specific GNSS Data GGA Output Global Positioning System Fix Data GSV Output GNSS Satellites in View GSA Output GNSS DOP and Active Satellites VTG Output Course Over Ground &amp; Ground Speed GLL Output Geographic Position \u2013 Latitude/Longitude <p>A full list of PQTM messages (proprietary NMEA messages defined by Quectel) supported by LG290P, is provided in section 2.3. PQTM Messages of the GNSS Protocol Specification manual. This protocol is used to configure or read the settings for the LG290P GNSS module.</p> List of Proprietary Quectel Messages Message Type Mode Message Description PQTMVER Output Outputs the firmware version PQTMCOLD Input Performs a cold start PQTMWARM Input Performs a warm start PQTMHOT Input Performs a hot start PQTMSRR Input Performs a system reset and reboots the receiver PQTMUNIQID Output Queries the module unique ID PQTMSAVEPAR Input Saves the configurations into NVM PQTMRESTOREPAR Input Restores the parameters configured by all commands to their default values PQTMVERNO Output Queries the firmware version PQTMCFGUART Input/Output Sets/gets the UART interface PQTMCFGPPS Input/Output Sets/gets the PPS feature PQTMCFGPROT Input/Output Sets/gets the input and output protocol for a specified port PQTMCFGNMEADP Input/Output Sets/gets the decimal places of standard NMEA messages PQTMEPE Output Outputs the estimated position error PQTMCFGMSGRATE Input/Output Sets/gets the message output rate on the current interface PQTMVEL Output Outputs the velocity information PQTMCFGGEOFENCE Input/Output Sets/gets geofence feature PQTMGEOFENCESTATUS Output Outputs the geofence status PQTMGNSSSTART Input Starts GNSS engine PQTMGNSSSTOP Input Stops GNSS engine PQTMTXT Output Outputs short text messages PQTMCFGSVIN Input/Output Sets/gets the Survey-in feature PQTMSVINSTATUS Output Outputs the Survey-in status PQTMPVT Output Outputs the PVT (GNSS only) result PQTMCFGRCVRMODE Input/Output Sets/gets the receiver working mode PQTMDEBUGON Input Enables debug log output PQTMDEBUGOFF Input Disables debug log output PQTMCFGFIXRATE Input/Output Sets/gets the fix interval PQTMCFGRTK Input/Output Sets/gets the RTK mode PQTMCFGCNST Input/Output Sets/gets the constellation configuration PQTMDOP Output Outputs dilution of precision PQTMPL Output Outputs protection level information PQTMCFGODO Input/Output Sets/gets the odometer feature PQTMRESETODO Input Resets the accumulated distance recorded by the odometer PQTMODO Output Outputs the odometer information PQTMCFGSIGNAL Input/Output Sets/gets GNSS signal mask PQTMCFGSAT Input/Output Sets/gets GNSS satellite mask PQTMCFGRSID Input/Output Sets/gets the reference station ID PQTMCFGRTCM Input/Output Sets/gets RTCM <p>A full list of compatible <code>RTCM v3</code> messages, is provided in section 3. RTCM Protocol of the GNSS Protocol Specification manual. This protocol is used for transferring GNSS raw measurement data, as detailed by the Radio Technical Commission for Maritime Services organization.</p> List of Supported RTCMv3 (MSM) Messages Message Type Mode Message Description 1005 Input/Output Stationary RTK Reference Station ARP 1006 Input/Output Stationary RTK Reference Station ARP with height 1019 Input/Output GPS Ephemerides 1020 Input/Output GLONASS Ephemerides 1041 Input/Output NavIC/IRNSS Ephemerides 1042 Input/Output BDS Satellite Ephemeris Data 1044 Input/Output QZSS Ephemerides 1046 Input/Output Galileo I/NAV Satellite Ephemeris Data 1073 Input/Output GPS MSM3 1074 Input/Output GPS MSM4 1075 Input/Output GPS MSM5 1076 Input/Output GPS MSM6 1077 Input/Output GPS MSM7 1083 Input/Output GLONASS MSM3 1084 Input/Output GLONASS MSM4 1085 Input/Output GLONASS MSM5 1086 Input/Output GLONASS MSM6 1087 Input/Output GLONASS MSM7 1093 Input/Output Galileo MSM3 1094 Input/Output Galileo MSM4 1095 Input/Output Galileo MSM5 1096 Input/Output Galileo MSM6 1097 Input/Output Galileo MSM7 1113 Input/Output QZSS MSM3 1114 Input/Output QZSS MSM4 1115 Input/Output QZSS MSM5 1116 Input/Output QZSS MSM6 1117 Input/Output QZSS MSM7 1123 Input/Output BDS MSM3 1124 Input/Output BDS MSM4 1125 Input/Output BDS MSM5 1126 Input/Output BDS MSM6 1127 Input/Output BDS MSM7 1133 Input/Output NavIC/IRNSS MSM3 1134 Input/Output NavIC/IRNSS MSM4 1135 Input/Output NavIC/IRNSS MSM5 1136 Input/Output NavIC/IRNSS MSM6 1137 Input/Output NavIC/IRNSS MSM7"},{"location":"hardware_overview/#buttons","title":"Buttons","text":"<p>There are two buttons on RTK Postcard; a RST and BOOT button.</p> <p></p> <p>RST and BOOT buttons on the RTK Postcard.</p> ResetBoot"},{"location":"hardware_overview/#reset-button","title":"Reset Button","text":"<p>The RST (reset) button allows users to reset the program running on the ESP32 Pico-Mini module without unplugging the board.</p>"},{"location":"hardware_overview/#boot-button","title":"Boot Button","text":"<p>The BOOT button can be used to force the board into the serial bootloader. Holding down the BOOT button, while connecting the board to a computer through its USB-C connector or resetting the board will cause it to enter the Firmware Download mode. The board will remain in this mode until it power cycles (happens automatically after uploading new firmware) or the RST button is pressed.</p> <ol> <li>Hold the BOOT button down.</li> <li>Reset the MCU.<ul> <li>While unpowered, connect the board to a computer with through the USB-C connection.</li> <li>While powered, press the RST button.</li> </ul> </li> <li>Release the BOOT button.</li> <li>After programming is completed, reboot the MCU.<ul> <li>Press the RST button.</li> <li>Power cycle the board.</li> </ul> </li> </ol>"},{"location":"hardware_overview/#gnss-antenna-connectors","title":"GNSS Antenna Connectors","text":"<p>While there are two GNSS antenna connectors, only the SMA connector is connected to the LG290P GNSS module by default. If users wish, they can rework the 0402 resistor on the antenna trace to utilize the u.fl connector instead.</p> <p></p> <p>The SMA connector for an external GNSS antenna on the RTK Postcard.</p> <p></p> <p>The u.fl connector for the PPS output from the RTK Postcard.</p> <p>Antenna Specifications</p> <ul> <li>Passive antennas are not recommended for the LG290P GNSS module.</li> <li>To mitigate the impact of out-of-band signals, utilize an active antenna whose SAW filter is placed in front of the LNA in the internal framework.<ul> <li>DO NOT select and antenna with the LNA placed in the front.</li> </ul> </li> <li>There is no need to inject an external DC voltage into the SMA connector for the GNSS antenna. Power is already provided from the LG290P module for the LNA of an active antenna.</li> </ul>"},{"location":"hardware_overview/#jst-connector","title":"JST Connector","text":"<p>The RTK Postcard features a 4-pin JST GH connector, which is polarized and locking. Users can access the pins of the <code>UART3</code> port, through the JST connector with our breadboard cable(1) or through the PTH pins. The pin layout of the JST connector is compatible with many of our serial radios and adapter cables.</p> <ol> <li> <p> <p>Breadboard to JST-GHR-04V Cable - 4-Pin x 1.25mm Pitch CAB-17240</p> <p></p> <p>The JST connector on the RTK Postcard.</p> Default Baudrate <ul> <li>The default bardrate of the <code>UART</code> ports from the LG290P is 480600bps, with the factory settings.</li> <li>The default bardrate of the <code>UART3</code> port from the LG290P (for the locking JST connector) is 57600bps, when utilizing the pre-programmed RTK Everywhere firmware.</li> </ul> Pin Connections"},{"location":"hardware_overview/#pin-connections","title":"Pin Connections","text":"<p>When connecting the RTK Postcard to other products, users need to be aware of the pin connections between the devices.</p> <p> Pin Number 1 (Left Side) 2 3 4 Label VCC TX3 RX3 GND Function Voltage Output     - Default: 3.3V     - Selectable: 3.3V or 5V  <code>UART3</code> - Receive <code>UART3</code> - Transmit Ground </p> <p>When connecting the RTK Postcard to our radios, the pin connections should follow the table below. If the flow control is not enabled, the only the <code>RX</code>, <code>TX</code>, and <code>GND</code> pins are utilized.</p> <p> Board RX TX GND Radio TX RX GND </p> <p>As documented in the LoRaSerial product manual, the pin connections between a host system (i.e. RTK Postcard) and the LoRaSerial Kit radio is outlined in the image below.</p> <p>  The <code>COM</code> ports on the RTK Postcard.  </p>"},{"location":"hardware_overview/#status-leds","title":"Status LEDs","text":"<p>There are five status LEDs on the RTK Postcard. The table below, lists the pin connections between these LEDs, the LG290P GNSS module, and the ESP32 Pico-Mini module. For details about their operation, please refer to the list at the underneath.</p>   | LED    | ESP32 GPIO | LG290P IO  | | :----: | :--------- | :--------- | | `BT`   | `GPIO 4`   | ---        | | `RTK`  | `GPIO 34`  | `RTK_STAT` | | `PPS`  | `GPIO 36`  | `1PPS`     | | `PWR`  | N/A        | N/A        | | `STAT` | `GPIO 0`   | ---        |   <p></p> <p>The status LED indicators on the RTK Postcard.</p> <ul> <li><code>BT</code> - Bluetooth (Blue)<ul> <li>With the RTK Everywhere firmware, this LED indicates when the ESP32 Pico-Mini module is paired with a Bluetooth device</li> </ul> </li> <li><code>RTK</code> - RTK Mode (White)<ul> <li>Indicates when an RTK fix has been established or when the correct RTCM data is being received (see the RTK section)</li> </ul> </li> <li><code>PPS</code> - Pulse-Per-Second (Yellow)<ul> <li>Indicates when there is a pulse-per-second signal (see the PPS Output section)</li> </ul> </li> <li><code>PWR</code> - Power (Red)<ul> <li>Turns on once 3.3V power is supplied to the board</li> </ul> </li> <li><code>STAT</code> - Status (Green)<ul> <li>With the RTK Everywhere firmware, this LED indicates the operation mode</li> </ul> </li> </ul>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction!</p> <ul> <li> <p> <p>How to Work with Jumper Pads and PCB Traces</p> <p>There are eight jumpers on the back of the board that can be used to easily modify the hardware connections on the board. From which, there are five jumpers that control power to the status LEDs on the board. By default, all the jumpers are connected to power the status LEDs. For low power applications, users can cut the jumpers to disconnect power from each of the LEDs.</p> <p></p> <p>The jumpers on the back of the RTK Postcard.</p> <ul> <li><code>I2C-EXT</code> - This jumper can be cut to disconnect the pull-up resistors on the <code>SCL_1</code> and <code>SDA_1</code> connections of the Qwiic connectors.</li> <li><code>SHLD</code> - This jumper can be cut to disconnect the shielding of the USB-C connector from the <code>GND</code> plane of the board</li> <li><code>VSEL</code> - This jumper can be modified to configure/disconnect the <code>VCC</code> pin of the 4-pin locking JST connector to/from <code>3V3</code> or <code>5V</code> power rails.<ul> <li>Users should also keep in mind that connecting the jumper to the <code>5V</code> power rail, could include the voltage provided by the LiPo battery from the Portability Shield.</li> </ul> </li> <li><code>STAT</code> - This jumper can be cut to remove power from the green LED, indicating the operational status for the RTK Everywhere firmware.</li> <li><code>PWR</code> - This jumper can be cut to remove power from the red, power LED.</li> <li><code>PPS</code> - This jumper can be cut to remove power from the yellow LED, which is connected to the PPS signal.</li> <li><code>RTK</code> - This jumper can be cut to remove power from the white LED, indicating RTK fix or operation in RTK mode.</li> <li><code>BT</code> - This jumper can be cut to remove power from the blue LED, indicating Bluetooth pairing for the RTK Everywhere firmware.</li> </ul> <p>Default Configuration</p> <ul> <li>By default, PPS signal is connected to the <code>PPS</code> pin.</li> <li>By default, the <code>VSEL</code> jumper is connected to <code>3V3</code> pad for a regulated 3.3V output on the 4-pin JST-GH connector.</li> <li>By default, the <code>BT_VCC</code> jumper provides a regulated 3.3V output to the BlueSMiRF header.</li> </ul> <ol> <li> <p>Feature Under Development</p> <p>Currently, only the UART interface is supported by the module. Support for the I<sup>2</sup>C and SPI interfaces are still under development.</p> <p>\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Feature Under Development</p> <p>Support for the <code>L1C</code> frequency band has not been implemented.</p> <p>\u21a9\u21a9</p> </li> <li> <p>Feature Under Development</p> <p>Corrections for some of the PPP services have not been implemented.</p> <p>\u21a9</p> </li> <li> <p>Feature Under Development</p> <p>The event trigger has not been implemented.</p> <p>\u21a9\u21a9</p> </li> </ol>"},{"location":"introduction/","title":"Introduction","text":"<ul> <li> <p> SparkFun RTK Postcard SKU: GPS-26916 <p> </p> <p> <p> \u00a0\u00a0Purchase from SparkFun  </p> <li> <p>Designed and manufactured in Boulder, CO USA, the SparkFun RTK Postcard is a compact development board for your high-precision positioning and navigation needs. This board combines the Quectel LG290P GNSS RTK receiver with an Espressif ESP32-PICO-MINI-02 MCU module, running our latest RTK Everywhere firmware. The ESP32 provides the SparkFun Postcard with WiFi and Bluetooth\u2122 connectivity to operate as an NTRIP caster or client. Meanwhile, the 4-pin locking JST-GH connector allows users to transmit or receive RTCMv3 messages for RTK corrections from a local base station.</p> <ul> <li> <p>The LG290P module is a quad-band, multi-constellation, high-precision, RTK GNSS receiver. The module can simultaneously receive signals from the <code>L1</code>, <code>L2</code>, <code>L5</code>, and <code>L6</code>/<code>E6</code> frequency bands of the GPS, GLONASS, Galileo, BDS, QZSS, and NavIC GNSS constellations. In addition, the module supports SBAS augmentation systems (WASS, EGNOS, BDSBAS, MSAS, GAGAN, and SDCM), PPP services<sup>2</sup> (BDS PPP-B2b, QZSS CLAS, MADOCA-PPP, and Galileo HAS), RTCM, and RTK corrections for precision navigation with a fast convergence time and reliable performance. Connect with ease using a variety of interfaces, including UART, SPI<sup>1</sup>, and I2C<sup>1</sup>.</p> </li> <li> <p>The ESP32-PICO-MINI-02 is a powerful MCU module with WiFi, Bluetooth\u2122, and BLE connectivity and comes integrated with 8MB SPI flash, 2MB SPI Pseudo static RAM (PSRAM), and a 40 MHz crystal oscillator. The ESP32 microcontroller itself features two CPU cores that can be individually controlled, with an adjustable clock frequency between 80 - 240MHz and a low-power co-processor for minor tasks, such as monitoring peripherals. It supports a range of peripherals including an SD card interface, capacitive touch sensors, ADC, DAC, Two-Wire Automotive Interface (TWAI), Ethernet, high-speed SPI, UART, I2S, I2C, etc.</p> </li> </ul> <p>With the RTK Everywhere firmware that comes pre-loaded, users can seamlessly operate the RTK Postcard as a base station or rover. These modes also offer additional functions, based on the available, wireless communication options:</p> <ul> <li>The RTK Postcard can transmit or receive RTCMv3 messages locally by connecting one of our SiK Telemetry radios.</li> <li>Through WiFi or Bluetooth\u2122, the RTK Postcard can also function as an NTRIP caster or client.</li> <li>The RTK Postcard can transmit NMEA messages to a graphical information software (GIS) apps on any mobile device when paired as a Bluetooth\u2122 device.</li> </ul> <p>In addition to the RTK Postcard, we created the Portability Shield for the convenience of users. Simply connecting these products, provides a 1.3\u201d OLED display and a five-way button to navigate the configuration settings and display PNT data; a microSD card slot for data logging; and a LiPo battery charger with a fuel gauge to take the RTK Postcard \"on-the-go\". All of these will operate plug-and-play without the need for new code.</p> <p>Info</p> <p>The RTK Everywhere firmware is open-source, so users can obtain, check, and even modify the device's functionality. This allows for easier feature expansion, bug maintenance, and longer device longevity.</p> </li> <p>Features Under Development</p> <ul> <li>I<sup>2</sup>C/SPI - Currently, only the UART interface is supported by the module.</li> <li>PPP Services - Corrections for some of the PPP services have not been implemented.</li> </ul>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To get started, users will need a few items. Some users may already have a few of these items, feel free to adjust accordingly.</p> <ul> <li>Computer and/or mobile device that is compatible with the operation of the RTK Everywhere firmware</li> <li>USB 3.1 Cable A to C - 3 Foot - Used to power/interface with the SparkFun RTK Postcard (1)</li> <li>SparkFun RTK Postcard</li> <li>GNSS Multi-Band Antenna</li> </ul> <ol> <li>If your computer doesn't have a USB-A slot, then choose an appropriate cable or adapter.</li> </ol> <ul> <li> <p> <p>USB 3.1 Cable A to C - 3 Foot CAB-14743</p> <li> <p> <p>SparkFun RTK Postcard GPS-26916</p> Recommended Accessories <p>These products are recommended at minimum for users to get started with the Portability Shield and RTK Everywhere firmware.</p> <ul> <li> <p> <p>GNSS Multi-Band L1/L2/L5 Helical Antenna (SMA) GPS-23847</p> <li> <p> <p>SparkFun Portability Shield DEV-27510</p> <li> <p> <p>Break Away Headers - Straight PRT-00116</p> Soldering Equipment <p>To add headers for the Portability Shield, users will need soldering equipment.</p> <p>New to soldering?</p> <p>Check out our How to Solder: Through-Hole Soldering tutorial for a quick introduction!</p> <ul> <li> <p> <p>How to Solder: Through-Hole Soldering</p> <ul> <li> <p> <p>Solder Lead Free - 100-gram Spool TOL-09325</p> <li> <p> <p>PINECIL Soldering Iron Kit KIT-24063</p> Optional Accessories <p>These products are optional, based on the utility required by the user.</p> <ul> <li> <p> <p>Lithium Ion Battery - 850mAh PRT-13854</p> <li> <p> <p>microSD Card - 1GB (Class 4) COM-15107</p> GNSS Antennas &amp; Accessories <p>For the best performance, we recommend users choose an active, multi-band GNSS antenna and utilize a low-loss cable. For additional options, please check out the GPS Antenna category of our product catalog.</p> GNSS AntennasCoaxial CablesMounting Hardware <ul> <li> <p> <p>GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H) GPS-21801</p> <li> <p> <p>GNSS Multi-Band L1/L2/L5 Helical Antenna (SMA) GPS-23847</p> <li> <p> <p>GNSS Multi-Band L1/L2/L5 Helical Antenna - SMA (BT-T009) GPS-23848</p> <li> <p> <p>MagmaX2 Active Multiband GNSS Magnetic Mount Antenna - AA.200 GPS-17108</p> <ul> <li> <p> <p>Interface Cable - SMA Female to SMA Male (10m, RG58) CAB-21281</p> <li> <p> <p>Reinforced Interface Cable - SMA Male to TNC Male (10m) CAB-21740</p> <li> <p> <p>Reinforced Interface Cable - SMA Male to TNC Male (300mm) CAB-21739</p> <ul> <li> <p> <p>GNSS Magnetic Antenna Mount - 5/8\" 11-TPI PRT-21257</p> <li> <p> <p>Magnetic Mount SMA - 2m GPS-19576</p> <li> <p> <p>GPS Antenna Ground Plate GPS-17519</p> <li> <p> <p>GNSS Antenna Mounting Hardware Kit KIT-22197</p> <li> <p> <p>Antenna Thread Adapter - 1/4in. to 5/8in. PRT-17546</p> <li> <p> <p>Telescopic Surveying Pole GPS-25795</p> Serial Transceivers, UART Adapters, and USB Cables <p>To configure the UART ports that are broken out on the board, users will need a UART adapter. Once configured, the UART ports can utilize one of our RF transceivers to send/receive RTCM messages.</p> TransceiversUART AdaptersUSB Cables <ul> <li> <p> <p>SiK Telemetry Radio V3 - 915MHz, 100mW WRL-19032</p> <li> <p> <p>SparkFun LoRaSerial Kit - 915MHz (Enclosed) WRL-20029</p> <li> <p> <p>JST-GHR-04V to JST-GHR-06V Cable - 1.25mm pitch CAB-17239</p> <li> <p> <p>GHR-04V-S to GHR-06V-S Cable - 100mm CAB-17854</p> <li> <p> <p>Breadboard to JST-GHR-04V Cable - 4-Pin x 1.25mm Pitch CAB-17240</p> <ul> <li> <p> <p>SparkFun Serial Basic Breakout - CH340C and USB-C DEV-15096</p> <li> <p> <p>SparkFun Serial Basic Breakout - CH340G DEV-14050</p> <li> <p> <p>SparkFun FTDI Starter Kit - 3.3V KIT-18289</p> <ul> <li> <p> <p>USB-C to USB-C Silicone Power Charging Cable - 3m CAB-24060</p> <li> <p> <p>USB 3.1 Cable A to C - 3 Foot CAB-14743</p> <li> <p> <p>SparkFun 4-in-1 Multi-USB Cable - USB-C Host CAB-21271</p> <li> <p> <p>SparkFun 4-in-1 Multi-USB Cable - USB-A Host CAB-21272</p> Shields, Headers, and Wiring <p>To add headers or wiring, users will need soldering equipment and headers/wires.</p> <p>New to soldering?</p> <p>Check out our How to Solder: Through-Hole Soldering tutorial for a quick introduction!</p> <ul> <li> <p> <p>How to Solder: Through-Hole Soldering</p> <ul> <li> <p> <p>Solder Lead Free - 100-gram Spool TOL-09325</p> <li> <p> <p>iFixit FixHub - Power Series Portable Soldering Station TOL-27147</p> <li> <p> <p>SparkFun Portability Shield DEV-27510</p> <li> <p> <p>Break Away Headers - Straight PRT-00116</p> <li> <p> <p>Header - 10-pin Female (PTH, 0.1\") PRT-11896</p> <li> <p> <p>Hook-Up Wire - Assortment (Stranded, 22 AWG) PRT-11375</p> Batteries <p>When using the Portability Shield, users can attach a single-cell LiPo battery to turn the boards into a mobile device.</p> Minimum Requirements Battery VoltageBattery Capacity <p>While users could probably discharge their LiPo batteries down to the maximum threshold of the battery's UVLO at 2.8V, the LG290P GNSS receiver and ESP32 MCU will discontinue operating, long  before that can occur. We have found that the LG290P will begin to brown-out around 3.05-3.15V and the ESP32 will stop operating around 2.85-2.90V.</p> <p>Therefore, users also won't be able to power this device with two 1.5V alkaline batteries (in series). They will require a minimum of three batteries to maintain an operational voltage, above 3.  15V.</p> <p>The discharge rate of most single-cell batteries is 1C, unless specified otherwise.</p> <p>Example</p> <p>That means that the maximum current that can be expected from a battery is equal its capacity/hr. For instance, a 400mAh battery can be expected to handle a current draw of 400mA, at maximum.</p> <ul> <li> <p> <p>Lithium Ion Battery - 400mAh PRT-13851</p> <li> <p> <p>Lithium Ion Battery - 850mAh PRT-13854</p> <li> <p> <p>Lithium Ion Battery - 1250mAh (IEC62133 Certified) PRT-18286</p> <li> <p> <p>Lithium Ion Battery - 1500mAh (IEC62133 Certified) PRT-26059</p> <li> <p> <p>Lithium Ion Battery - 2Ah PRT-13855</p> <li> <p> <p>Lithium Ion Battery - 6Ah PRT-13856</p> <li> <p> <p>Battery Holder 3xAA with Cover and Switch - JST Connector PRT-18769</p> Qwiic Devices and Cables <p>Our Qwiic connect system is a simple solution for daisy chaining I<sup>2</sup>C devices without the hassle of soldering or checking wire connections. Check out other Qwiic devices from our catalog.</p> <ul> <li> <p> <p>SparkFun Qwiic OLED - (1.3in., 128x64) LCD-23453</p> <li> <p> <p>SparkFun Qwiic Navigation Switch PRT-27576</p> <li> <p> <p>SparkFun Qwiic Directional Pad PRT-26851</p> <li> <p> <p>SparkFun Qwiic Cable Kit KIT-15081</p> <li> <p> <p>Qwiic Cable - Grove Adapter (100mm) PRT-15109</p> <li> <p> <p>SparkFun Micro Pressure Sensor - BMP384 (Qwiic) SEN-19833</p> <li> <p> <p>SparkFun Qwiic Button - Green LED BOB-16842</p> <p>What is Qwiic?</p> <p> </p> <p>The Qwiic connect system is a solderless, polarized connection system that allows users to seamlessly daisy chain I<sup>2</sup>C boards together. Play the video, to learn more about the Qwiic connect system or click on the banner above to learn more about Qwiic products.</p> <p> <p> </p> <p>Features of the Qwiic System</p> No SolderingPolarized ConnectorDaisy Chain-able <p> </p> <p>Qwiic cables (4-pin JST) plug easily from development boards to sensors, shields, accessory boards and more, making easy work of setting up a new prototype.</p> <p> </p> <p>There's no need to worry about accidentally swapping the <code>SDA</code> and <code>SCL</code> wires on your breadboard. The Qwiic connector is polarized so you know you\u2019ll have it wired correctly every time.</p> <p>The part numbers for the PCB connector is <code>SM04B-SRSS</code> (Datasheet) and the mating connector on the cables is <code>SHR04V-S-B</code>; or an equivalent 1mm pitch, 4-pin JST connection.</p> <p> </p> <p>It\u2019s time to leverage the power of the I<sup>2</sup>C bus! Most Qwiic boards will have two or more connectors on them, allowing multiple devices to be connected.</p> Jumper Modification <p>To modify the jumpers, users will need soldering equipment and/or a hobby knife.</p> <p>New to jumper pads?</p> <p>Check out our Jumper Pads and PCB Traces Tutorial for a quick introduction!</p> <ul> <li> <p> <p>How to Work with Jumper Pads and PCB Traces</p> <ul> <li> <p> <p>iFixit FixHub - Power Series Portable Soldering Station TOL-27147</p> <li> <p> <p>Hobby Knife TOL-09200</p> <li> <p> <p>Chip Quik No-Clean Flux Pen - 10mL TOL-14579</p> <li> <p> <p>Solder Wick #2 5ft. - Generic TOL-09327</p>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>As a more sophisticated product, we will skip over the more fundamental tutorials (i.e. Ohm's Law and What is Electricity?). However, below are a few tutorials that may help users familiarize themselves with various aspects of the board.</p> <p>Tip</p> <p>Check out the www.gps.gov website to learn more about the U.S.-owned Global Positioning System (GPS) and the Global Navigation Satellite Systems (GNSS) of other countries.</p> <ul> <li> <p> <p>GPS Basics</p> <li> <p> <p>What is GPS RTK?</p> <li> <p> <p>Quadband GNSS RTK Breakout - LG290P (Qwiic) Hookup Guide</p> <li> <p> <p>Portability Shield Hookup Guide</p> <li> <p> <p>SparkFun RTK Everywhere Product Manual</p> <li> <p> <p>Logic Levels</p> <li> <p> <p>Serial Communication</p> <li> <p> <p>Serial Terminal Basics</p> <li> <p> <p>I2C</p> <li> <p> <p>SPI</p> <li> <p> <p>How to Power a Project</p> <li> <p> <p>How to Solder: Through-Hole Soldering</p> <li> <p> <p>How to Work with Jumper Pads and PCB Traces</p> Related Blog Posts <p>Additionally, users may be interested in these blog post articles on GNSS technologies:</p> <ul> <li> <p> <p>GPS vs GNSS</p> <li> <p> <p>What is Correction Data?</p> <li> <p> <p>Real-Time Kinematics Explained</p> <li> <p> <p>New Video: Unlocking High-Precision RTK Positioning</p> <li> <p> <p>DIY RTK Surveying</p> <ol> <li> <p>Feature Under Development</p> <p>I<sup>2</sup>C/SPI - Currently, only the UART interface is supported by the module.</p> <p>\u21a9\u21a9</p> </li> <li> <p>Feature Under Development</p> <p>Corrections for some of the PPP services have not been implemented.</p> <p>\u21a9</p> </li> </ol>"},{"location":"pqmt_commands/","title":"PQMT Commands","text":"<p>Below, are excerpts for a few of the PQTM messages from the GNSS Protocol Specification manual. Users will find these useful for configuring their LG290P GNSS module as an RTK base station or rover.</p> Documentation <p>A full list of PQTM messages (proprietary NMEA messages defined by Quectel) supported by LG290P, is provided in section 2.3. PQTM Messages of the GNSS Protocol Specification manual. This protocol is used to configure or read the settings for the LG290P GNSS module.</p> List of Proprietary Quectel Messages Message Type Mode Message Description PQTMVER Output Outputs the firmware version PQTMCOLD Input Performs a cold start PQTMWARM Input Performs a warm start PQTMHOT Input Performs a hot start PQTMSRR Input Performs a system reset and reboots the receiver PQTMUNIQID Output Queries the module unique ID PQTMSAVEPAR Input Saves the configurations into NVM PQTMRESTOREPAR Input Restores the parameters configured by all commands to their default values PQTMVERNO Output Queries the firmware version PQTMCFGUART Input/Output Sets/gets the UART interface PQTMCFGPPS Input/Output Sets/gets the PPS feature PQTMCFGPROT Input/Output Sets/gets the input and output protocol for a specified port PQTMCFGNMEADP Input/Output Sets/gets the decimal places of standard NMEA messages PQTMEPE Output Outputs the estimated position error PQTMCFGMSGRATE Input/Output Sets/gets the message output rate on the current interface PQTMVEL Output Outputs the velocity information PQTMCFGGEOFENCE Input/Output Sets/gets geofence feature PQTMGEOFENCESTATUS Output Outputs the geofence status PQTMGNSSSTART Input Starts GNSS engine PQTMGNSSSTOP Input Stops GNSS engine PQTMTXT Output Outputs short text messages PQTMCFGSVIN Input/Output Sets/gets the Survey-in feature PQTMSVINSTATUS Output Outputs the Survey-in status PQTMPVT Output Outputs the PVT (GNSS only) result PQTMCFGRCVRMODE Input/Output Sets/gets the receiver working mode PQTMDEBUGON Input Enables debug log output PQTMDEBUGOFF Input Disables debug log output PQTMCFGFIXRATE Input/Output Sets/gets the fix interval PQTMCFGRTK Input/Output Sets/gets the RTK mode PQTMCFGCNST Input/Output Sets/gets the constellation configuration PQTMDOP Output Outputs dilution of precision PQTMPL Output Outputs protection level information PQTMCFGODO Input/Output Sets/gets the odometer feature PQTMRESETODO Input Resets the accumulated distance recorded by the odometer PQTMODO Output Outputs the odometer information PQTMCFGSIGNAL Input/Output Sets/gets GNSS signal mask PQTMCFGSAT Input/Output Sets/gets GNSS satellite mask PQTMCFGRSID Input/Output Sets/gets the reference station ID PQTMCFGRTCM Input/Output Sets/gets RTCM"},{"location":"pqmt_commands/#save-parametersrestore-to-default-settings","title":"Save Parameters/Restore to Default Settings","text":""},{"location":"pqmt_commands/#pqtmsavepar","title":"<code>PQTMSAVEPAR</code>","text":"<p>Saves the current configurations into NVM of the LG290P</p> <pre><code>$PQTMSAVEPAR*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;\n</code></pre> Example <p>Save the current settings to non-volatile memory of the LG290P. <pre><code>$PQTMSAVEPAR*5A\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMSAVEPAR,OK*72\n</code></pre></p>"},{"location":"pqmt_commands/#pqtmrestorepar","title":"<code>PQTMRESTOREPAR</code>","text":"<p>Restores the parameters configured by all commands to their default values; this command takes effect after restarting the LG290P</p> <pre><code>$PQTMRESTOREPAR*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;  \n</code></pre> Example <p>Restore all the settings of the LG290P to their factory defaults  <pre><code>$PQTMRESTOREPAR*13\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMRESTOREPAR,OK*3B\n</code></pre></p>"},{"location":"pqmt_commands/#uart-settings","title":"UART Settings","text":""},{"location":"pqmt_commands/#pqtmcfguart","title":"<code>PQTMCFGUART</code>","text":"<p>Configures the serial protocol setting for the UART interfaces</p> <ul> <li> <p>Current UART interface:</p> <pre><code>$PQTMCFGUART,W,&lt;BaudRate&gt;[,&lt;DataBit&gt;,&lt;Parity&gt;,&lt;StopBit&gt;,&lt;FlowCtrl&gt;]*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;\n</code></pre> </li> <li> <p>A specific UART interface:</p> <pre><code>$PQTMCFGUART,W,&lt;Index&gt;,&lt;BaudRate&gt;[,&lt;DataBit&gt;,&lt;Parity&gt;,&lt;StopBit&gt;,&lt;FlowCtrl&gt;]*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;\n</code></pre> </li> </ul> <p>Parameters:</p> <p> Field <code>&lt;Index&gt;</code> <code>&lt;BaudRate&gt;</code> <code>&lt;DataBit&gt;</code> <code>&lt;Parity&gt;</code> <code>&lt;StopBit&gt;</code> <code>&lt;FlowCtrl&gt;</code> Description UART Interface <ul> <li><code>1</code> = UART1</li> <li><code>2</code> = UART2</li> <li><code>3</code> = UART3</li> </ul> Baud Rate (bps) <ul> <li><code>9600</code></li> <li><code>115200</code></li> <li><code>230400</code></li> <li><code>460800</code></li> <li><code>921600</code></li> </ul> Number of Data Bits <ul> <li><code>8</code> = 8 bits</li> </ul> Parity <ul> <li><code>0</code> = No parity</li> <li><code>1</code> = Odd parity</li> <li><code>2</code> = Even parity</li> <li><code>3</code> = Mark</li> <li><code>4</code> = Space</li> </ul> Number of Stop Bit(s) <ul> <li><code>1</code> = 1 stop bit</li> <li><code>2</code> = 2 stop bits</li> </ul> Flow Control <ul> <li><code>0</code> = None</li> </ul> </p> Baud Rate <p>For ports utilized in conjunction with either the BlueSMiRF or radio transceivers, we recommend reducing the baud rate to 115200bps or lower to avoid overflowing the buffers of the transceiver's serial port.</p> Configure the Settings <p>Example Settings</p> <ul> <li>Port: <code>UART1</code></li> <li>Baud Rate: 115200bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul> <p>Configure the baud rate of the current UART interface to 115200bps: <pre><code>$PQTMCFGUART,W,115200*18\n</code></pre></p> <p>Configure the baud rate of <code>UART1</code> to 115200bps: <pre><code>$PQTMCFGUART,W,1,115200*05\n</code></pre></p> <p>Configure all parameters of the current UART interface: <pre><code>$PQTMCFGUART,W,115200,8,0,1,0*11\n</code></pre></p> <p>Configure all parameters of <code>UART1</code>: <pre><code>$PQTMCFGUART,W,1,115200,8,0,1,0*0C\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGUART,OK*60\n</code></pre></p> Retrieve the Settings <p>Example Settings</p> <ul> <li>Port: <code>UART1</code></li> <li>Baud Rate: 115200bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul> <p>Get the configuration on the current UART interface: <pre><code>$PQTMCFGUART,R*36\n</code></pre></p> <p>Get the configuration on UART1: <pre><code>$PQTMCFGUART,R,1*2B\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGUART,OK,1,115200,8,0,1,0*5F\n</code></pre></p>"},{"location":"pqmt_commands/#pqtmcfgprot","title":"<code>PQTMCFGPROT</code>","text":"<p>Configures the input/output protocol on a specified port</p> <pre><code>$PQTMCFGPROT,W,&lt;PortType&gt;,&lt;PortID&gt;,&lt;InputProt&gt;,&lt;OutputProt&gt;*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;\n</code></pre> <p>Parameters:</p> <p> Field <code>&lt;PortType&gt;</code> <code>&lt;PortID&gt;</code> <code>&lt;InputProt&gt;</code> <code>&lt;OutputProt&gt;</code> Description Port Type <ul> <li><code>1</code> = UART</li> </ul> Port ID <ul> <li><code>1</code> = UART1</li> <li><code>2</code> = UART2</li> <li><code>3</code> = UART3</li> </ul> Input/Output Protocols (<code>HEX</code>: 32-bit) <ul> <li>Bit <code>0</code> = NMEA</li> <li>Bit <code>2</code> = RTCM3</li> </ul> The default protocols are NMEA and RTCM3: HEX: <code>00000005</code> BIN: <code>0000 0000 0000 0000 0000 0000 0000 0101</code> </p> Configure the Settings <p>Example Settings</p> <ul> <li>Port: <code>UART1</code></li> <li>Input Protocol: NMEA &amp; RTCM3</li> <li>Input Protocol: NMEA &amp; RTCM3</li> </ul> <p>Configure the configuration on UART1: <pre><code>$PQTMCFGPROT,W,1,1,00000005,00000005*38\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGPROT,OK*6B\n</code></pre></p> Retrieve the Settings <p>Example Settings</p> <ul> <li>Port: <code>UART1</code></li> <li>Input Protocol: NMEA &amp; RTCM3</li> <li>Input Protocol: NMEA &amp; RTCM3</li> </ul> <p>Get the configuration on UART1: <pre><code>$PQTMCFGPROT,R,1,1*3D\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGPROT,OK,1,1,00000005,00000005*6B\n</code></pre></p>"},{"location":"pqmt_commands/#rtk-settings","title":"RTK Settings","text":""},{"location":"pqmt_commands/#pqtmcfgsvin","title":"<code>PQTMCFGSVIN</code>","text":"<p>Configures a base station's position either by survey-in mode or fixed mode</p> <pre><code>$PQTMCFGSVIN,W,&lt;Mode&gt;,&lt;CFG_CNT&gt;,&lt;3D_AccLimit&gt;,&lt;ECEF_X&gt;,&lt;ECEF_Y&gt;,&lt;ECEF_Z&gt;*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;\n</code></pre> <p>Parameters:</p> <p> Field <code>&lt;Mode&gt;</code> <code>&lt;CFG_CNT&gt;</code> <code>&lt;3D_AccLimit&gt;</code> <code>&lt;ECEF_X&gt;</code> <code>&lt;ECEF_Y&gt;</code> <code>&lt;ECEF_Z&gt;</code> Description Receiver Mode <ul> <li><code>0</code> = Disable</li> <li><code>1</code> = Survey-in mode</li> <li><code>2</code> = Fixed mode(Position is configured in ECEF coordinates)</li> </ul> Survey-in Mode Minimum positioning time (seconds) <ul> <li>Range: <code>0</code>-<code>86400</code></li> <li>Default: <code>0</code></li> </ul> Survey-in Mode 3D positioning accuracy (meters) <ul> <li><code>0</code> = No limit</li> <li>Default: <code>0.0</code></li> </ul> Fixed Mode WGS84 ECEF X,Y,Z coordinates (meters) <ul> <li>Default: <code>0.0000</code></li> </ul> </p> RTK Base Station Modes <p>In order to operate as a base station, the LG290P GNSS module requires an accurate position of its antenna. This can be either defined in ECEF coordinates or acquired through a self-survey process.</p> <ol> <li>Survey-In Mode: The base station's location is established based on a weighted mean of recent solutions of its position. The <code>&lt;CFG_CNT&gt;</code> and <code>&lt;3D_AccLimit&gt;</code> parameters define the shortest amount of time that the position gets surveyed and the maximum standard deviation of the estimated position.</li> <li>Fixed Mode: The base station's position is provided in ECEF coordinates.</li> </ol> <p>Note</p> <p>Any error in the base station's location will translate directly into an error in the rover's position.</p> Configure the Settings <p>Example Settings</p> <ul> <li>Mode: Survey-in mode</li> <li>Survey Time: 3600 seconds</li> <li>3D Accuracy: 1.2m</li> <li>ECEF Coordinates:<ul> <li>X: -2519265.0514m</li> <li>Y: 4849534.9045m</li> <li>Z: 3277834.6432m</li> </ul> </li> </ul> <p>Configure the configuration on UART1: <pre><code>$PQTMCFGSVIN,W,1,3600,1.2,-2519265.0514,4849534.9045,3277834.6432*01\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGSVIN,OK*70\n</code></pre></p> Retrieve the Settings <p>Example Settings</p> <ul> <li>Mode: Survey-in mode</li> <li>Survey Time: 3600 seconds</li> <li>3D Accuracy: 1.2m</li> <li>ECEF Coordinates:<ul> <li>X: -2519265.0514m</li> <li>Y: 4849534.9045m</li> <li>Z: 3277834.6432m</li> </ul> </li> </ul> <p>Get the configuration on UART1: <pre><code>$PQTMCFGSVIN,R*26\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGSVIN,OK,1,3600,1.2,-2519265.0514,4849534.9045,3277834.6432*52\n</code></pre></p>"},{"location":"pqmt_commands/#pqtmcfgrcvrmode","title":"<code>PQTMCFGRCVRMODE</code>","text":"<p>Configures the mode that the receiver is operating in</p> <pre><code>$PQTMCFGRCVRMODE,W,&lt;Mode&gt;*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;\n</code></pre> <p>Parameters:</p> <p> Field <code>&lt;Mode&gt;</code> Description Operation mode <ul> <li><code>0</code> = Unknown</li> <li> <code>1</code> = Rover When set to this mode, the receiver will restore to default NMEA message output state. </li> <li><code>2</code> = Base Station When set to this mode, the receiver will automatically disable NMEA message output and enable RTCM <code>MSM4</code> and RTCMv3 <code>1005</code> message output. </li> </ul> </p> <p>Note</p> <p>After switching the module\u2018s working mode, save the configuration and then reset the module. Otherwise, it will continue to operate in the original mode.</p> Configure the Settings <p>Example Settings</p> <ul> <li>Port ID: <code>UART1</code></li> <li>Input Protocol: NMEA &amp; RTCM3</li> <li>Input Protocol: NMEA &amp; RTCM3</li> </ul> <p>Configure the configuration on UART1: <pre><code>$PQTMCFGRCVRMODE,W,2*29\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGRCVRMODE,OK*64\n</code></pre></p> Retrieve the Settings <p>Example Settings</p> <ul> <li>Port ID: <code>UART1</code></li> <li>Input Protocol: NMEA &amp; RTCM3</li> <li>Input Protocol: NMEA &amp; RTCM3</li> </ul> <p>Get the configuration on UART1: <pre><code>$PQTMCFGRCVRMODE,R*32\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGRCVRMODE,OK,2*7A\n</code></pre></p>"},{"location":"pqmt_commands/#pqtmcfgrtk","title":"<code>PQTMCFGRTK</code>","text":"<p>Configures the operation settings of the RTK mode</p> <pre><code>$PQTMCFGRTK,W,&lt;DiffMode&gt;,&lt;RelMode&gt;*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;\n</code></pre> <p>Parameters:</p> <p> Field <code>&lt;DiffMode&gt;</code> <code>&lt;RelMode&gt;</code> Description Differential Mode <ul> <li><code>0</code> = Disable RTK/RTD feature (Differential data is not used)</li> <li><code>1</code> = Auto mode</li> <li><code>2</code> = RTD only mode (Only pseudoranges is used)</li> </ul> Absolute/Relative Mode <ul> <li><code>1</code> = Absolute mode, ensure absolute position accuracy</li> <li><code>2</code> = Relative mode, ensure relative position accuracy</li> </ul> This field only takes effect when <code>&lt;DiffMode&gt;</code> = <code>1</code> and the module enters the RTK only mode.  </p> Configure the Settings <p>Example Settings</p> <ul> <li>Port ID: <code>UART1</code></li> <li>Input Protocol: NMEA &amp; RTCM3</li> <li>Input Protocol: NMEA &amp; RTCM3</li> </ul> <p>Configure the configuration on UART1: <pre><code>$PQTMCFGRTK,W,1,1*6C\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGRTK,OK*3F\n</code></pre></p> Retrieve the Settings <p>Example Settings</p> <ul> <li>Port ID: <code>UART1</code></li> <li>Input Protocol: NMEA &amp; RTCM3</li> <li>Input Protocol: NMEA &amp; RTCM3</li> </ul> <p>Get the configuration on UART1: <pre><code>$PQTMCFGRTK,R*69\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGRTK,OK,1,1*3F\n</code></pre></p>"},{"location":"print_view/","title":"Introduction","text":"<ul> <li> <p> SparkFun RTK Postcard SKU: GPS-26916 <p> </p> <p> <p> \u00a0\u00a0Purchase from SparkFun  </p> <li> <p>Designed and manufactured in Boulder, CO USA, the SparkFun RTK Postcard is a compact development board for your high-precision positioning and navigation needs. This board combines the Quectel LG290P GNSS RTK receiver with an Espressif ESP32-PICO-MINI-02 MCU module, running our latest RTK Everywhere firmware. The ESP32 provides the SparkFun Postcard with WiFi and Bluetooth\u2122 connectivity to operate as an NTRIP caster or client. Meanwhile, the 4-pin locking JST-GH connector allows users to transmit or receive RTCMv3 messages for RTK corrections from a local base station.</p> <ul> <li> <p>The LG290P module is a quad-band, multi-constellation, high-precision, RTK GNSS receiver. The module can simultaneously receive signals from the <code>L1</code>, <code>L2</code>, <code>L5</code>, and <code>L6</code>/<code>E6</code> frequency bands of the GPS, GLONASS, Galileo, BDS, QZSS, and NavIC GNSS constellations. In addition, the module supports SBAS augmentation systems (WASS, EGNOS, BDSBAS, MSAS, GAGAN, and SDCM), PPP services<sup>2</sup> (BDS PPP-B2b, QZSS CLAS, MADOCA-PPP, and Galileo HAS), RTCM, and RTK corrections for precision navigation with a fast convergence time and reliable performance. Connect with ease using a variety of interfaces, including UART, SPI<sup>1</sup>, and I2C<sup>1</sup>.</p> </li> <li> <p>The ESP32-PICO-MINI-02 is a powerful MCU module with WiFi, Bluetooth\u2122, and BLE connectivity and comes integrated with 8MB SPI flash, 2MB SPI Pseudo static RAM (PSRAM), and a 40 MHz crystal oscillator. The ESP32 microcontroller itself features two CPU cores that can be individually controlled, with an adjustable clock frequency between 80 - 240MHz and a low-power co-processor for minor tasks, such as monitoring peripherals. It supports a range of peripherals including an SD card interface, capacitive touch sensors, ADC, DAC, Two-Wire Automotive Interface (TWAI), Ethernet, high-speed SPI, UART, I2S, I2C, etc.</p> </li> </ul> <p>With the RTK Everywhere firmware that comes pre-loaded, users can seamlessly operate the RTK Postcard as a base station or rover. These modes also offer additional functions, based on the available, wireless communication options:</p> <ul> <li>The RTK Postcard can transmit or receive RTCMv3 messages locally by connecting one of our SiK Telemetry radios.</li> <li>Through WiFi or Bluetooth\u2122, the RTK Postcard can also function as an NTRIP caster or client.</li> <li>The RTK Postcard can transmit NMEA messages to a graphical information software (GIS) apps on any mobile device when paired as a Bluetooth\u2122 device.</li> </ul> <p>In addition to the RTK Postcard, we created the Portability Shield for the convenience of users. Simply connecting these products, provides a 1.3\u201d OLED display and a five-way button to navigate the configuration settings and display PNT data; a microSD card slot for data logging; and a LiPo battery charger with a fuel gauge to take the RTK Postcard \"on-the-go\". All of these will operate plug-and-play without the need for new code.</p> <p>Info</p> <p>The RTK Everywhere firmware is open-source, so users can obtain, check, and even modify the device's functionality. This allows for easier feature expansion, bug maintenance, and longer device longevity.</p> </li> <p>Features Under Development</p> <ul> <li>I<sup>2</sup>C/SPI - Currently, only the UART interface is supported by the module.</li> <li>PPP Services - Corrections for some of the PPP services have not been implemented.</li> </ul>"},{"location":"print_view/#required-materials","title":"Required Materials","text":"<p>To get started, users will need a few items. Some users may already have a few of these items, feel free to adjust accordingly.</p> <ul> <li>Computer and/or mobile device that is compatible with the operation of the RTK Everywhere firmware</li> <li>USB 3.1 Cable A to C - 3 Foot - Used to power/interface with the SparkFun RTK Postcard (1)</li> <li>SparkFun RTK Postcard</li> <li>GNSS Multi-Band Antenna</li> </ul> <ol> <li>If your computer doesn't have a USB-A slot, then choose an appropriate cable or adapter.</li> </ol> <ul> <li> <p> <p>USB 3.1 Cable A to C - 3 Foot CAB-14743</p> <li> <p> <p>SparkFun RTK Postcard GPS-26916</p> Recommended Accessories <p>These products are recommended at minimum for users to get started with the Portability Shield and RTK Everywhere firmware.</p> <ul> <li> <p> <p>GNSS Multi-Band L1/L2/L5 Helical Antenna (SMA) GPS-23847</p> <li> <p> <p>SparkFun Portability Shield DEV-27510</p> <li> <p> <p>Break Away Headers - Straight PRT-00116</p> Soldering Equipment <p>To add headers for the Portability Shield, users will need soldering equipment.</p> <p>New to soldering?</p> <p>Check out our How to Solder: Through-Hole Soldering tutorial for a quick introduction!</p> <ul> <li> <p> <p>How to Solder: Through-Hole Soldering</p> <ul> <li> <p> <p>Solder Lead Free - 100-gram Spool TOL-09325</p> <li> <p> <p>PINECIL Soldering Iron Kit KIT-24063</p> Optional Accessories <p>These products are optional, based on the utility required by the user.</p> <ul> <li> <p> <p>Lithium Ion Battery - 850mAh PRT-13854</p> <li> <p> <p>microSD Card - 1GB (Class 4) COM-15107</p> GNSS Antennas &amp; Accessories <p>For the best performance, we recommend users choose an active, multi-band GNSS antenna and utilize a low-loss cable. For additional options, please check out the GPS Antenna category of our product catalog.</p> GNSS AntennasCoaxial CablesMounting Hardware <ul> <li> <p> <p>GNSS Multi-Band L1/L2/L5 Surveying Antenna - TNC (SPK6618H) GPS-21801</p> <li> <p> <p>GNSS Multi-Band L1/L2/L5 Helical Antenna (SMA) GPS-23847</p> <li> <p> <p>GNSS Multi-Band L1/L2/L5 Helical Antenna - SMA (BT-T009) GPS-23848</p> <li> <p> <p>MagmaX2 Active Multiband GNSS Magnetic Mount Antenna - AA.200 GPS-17108</p> <ul> <li> <p> <p>Interface Cable - SMA Female to SMA Male (10m, RG58) CAB-21281</p> <li> <p> <p>Reinforced Interface Cable - SMA Male to TNC Male (10m) CAB-21740</p> <li> <p> <p>Reinforced Interface Cable - SMA Male to TNC Male (300mm) CAB-21739</p> <ul> <li> <p> <p>GNSS Magnetic Antenna Mount - 5/8\" 11-TPI PRT-21257</p> <li> <p> <p>Magnetic Mount SMA - 2m GPS-19576</p> <li> <p> <p>GPS Antenna Ground Plate GPS-17519</p> <li> <p> <p>GNSS Antenna Mounting Hardware Kit KIT-22197</p> <li> <p> <p>Antenna Thread Adapter - 1/4in. to 5/8in. PRT-17546</p> <li> <p> <p>Telescopic Surveying Pole GPS-25795</p> Serial Transceivers, UART Adapters, and USB Cables <p>To configure the UART ports that are broken out on the board, users will need a UART adapter. Once configured, the UART ports can utilize one of our RF transceivers to send/receive RTCM messages.</p> TransceiversUART AdaptersUSB Cables <ul> <li> <p> <p>SiK Telemetry Radio V3 - 915MHz, 100mW WRL-19032</p> <li> <p> <p>SparkFun LoRaSerial Kit - 915MHz (Enclosed) WRL-20029</p> <li> <p> <p>JST-GHR-04V to JST-GHR-06V Cable - 1.25mm pitch CAB-17239</p> <li> <p> <p>GHR-04V-S to GHR-06V-S Cable - 100mm CAB-17854</p> <li> <p> <p>Breadboard to JST-GHR-04V Cable - 4-Pin x 1.25mm Pitch CAB-17240</p> <ul> <li> <p> <p>SparkFun Serial Basic Breakout - CH340C and USB-C DEV-15096</p> <li> <p> <p>SparkFun Serial Basic Breakout - CH340G DEV-14050</p> <li> <p> <p>SparkFun FTDI Starter Kit - 3.3V KIT-18289</p> <ul> <li> <p> <p>USB-C to USB-C Silicone Power Charging Cable - 3m CAB-24060</p> <li> <p> <p>USB 3.1 Cable A to C - 3 Foot CAB-14743</p> <li> <p> <p>SparkFun 4-in-1 Multi-USB Cable - USB-C Host CAB-21271</p> <li> <p> <p>SparkFun 4-in-1 Multi-USB Cable - USB-A Host CAB-21272</p> Shields, Headers, and Wiring <p>To add headers or wiring, users will need soldering equipment and headers/wires.</p> <p>New to soldering?</p> <p>Check out our How to Solder: Through-Hole Soldering tutorial for a quick introduction!</p> <ul> <li> <p> <p>How to Solder: Through-Hole Soldering</p> <ul> <li> <p> <p>Solder Lead Free - 100-gram Spool TOL-09325</p> <li> <p> <p>iFixit FixHub - Power Series Portable Soldering Station TOL-27147</p> <li> <p> <p>SparkFun Portability Shield DEV-27510</p> <li> <p> <p>Break Away Headers - Straight PRT-00116</p> <li> <p> <p>Header - 10-pin Female (PTH, 0.1\") PRT-11896</p> <li> <p> <p>Hook-Up Wire - Assortment (Stranded, 22 AWG) PRT-11375</p> Batteries <p>When using the Portability Shield, users can attach a single-cell LiPo battery to turn the boards into a mobile device.</p> Minimum Requirements Battery VoltageBattery Capacity <p>While users could probably discharge their LiPo batteries down to the maximum threshold of the battery's UVLO at 2.8V, the LG290P GNSS receiver and ESP32 MCU will discontinue operating, long  before that can occur. We have found that the LG290P will begin to brown-out around 3.05-3.15V and the ESP32 will stop operating around 2.85-2.90V.</p> <p>Therefore, users also won't be able to power this device with two 1.5V alkaline batteries (in series). They will require a minimum of three batteries to maintain an operational voltage, above 3.  15V.</p> <p>The discharge rate of most single-cell batteries is 1C, unless specified otherwise.</p> <p>Example</p> <p>That means that the maximum current that can be expected from a battery is equal its capacity/hr. For instance, a 400mAh battery can be expected to handle a current draw of 400mA, at maximum.</p> <ul> <li> <p> <p>Lithium Ion Battery - 400mAh PRT-13851</p> <li> <p> <p>Lithium Ion Battery - 850mAh PRT-13854</p> <li> <p> <p>Lithium Ion Battery - 1250mAh (IEC62133 Certified) PRT-18286</p> <li> <p> <p>Lithium Ion Battery - 1500mAh (IEC62133 Certified) PRT-26059</p> <li> <p> <p>Lithium Ion Battery - 2Ah PRT-13855</p> <li> <p> <p>Lithium Ion Battery - 6Ah PRT-13856</p> <li> <p> <p>Battery Holder 3xAA with Cover and Switch - JST Connector PRT-18769</p> Qwiic Devices and Cables <p>Our Qwiic connect system is a simple solution for daisy chaining I<sup>2</sup>C devices without the hassle of soldering or checking wire connections. Check out other Qwiic devices from our catalog.</p> <ul> <li> <p> <p>SparkFun Qwiic OLED - (1.3in., 128x64) LCD-23453</p> <li> <p> <p>SparkFun Qwiic Navigation Switch PRT-27576</p> <li> <p> <p>SparkFun Qwiic Directional Pad PRT-26851</p> <li> <p> <p>SparkFun Qwiic Cable Kit KIT-15081</p> <li> <p> <p>Qwiic Cable - Grove Adapter (100mm) PRT-15109</p> <li> <p> <p>SparkFun Micro Pressure Sensor - BMP384 (Qwiic) SEN-19833</p> <li> <p> <p>SparkFun Qwiic Button - Green LED BOB-16842</p> <p>What is Qwiic?</p> <p> </p> <p>The Qwiic connect system is a solderless, polarized connection system that allows users to seamlessly daisy chain I<sup>2</sup>C boards together. Play the video, to learn more about the Qwiic connect system or click on the banner above to learn more about Qwiic products.</p> <p> <p> </p> <p>Features of the Qwiic System</p> No SolderingPolarized ConnectorDaisy Chain-able <p> </p> <p>Qwiic cables (4-pin JST) plug easily from development boards to sensors, shields, accessory boards and more, making easy work of setting up a new prototype.</p> <p> </p> <p>There's no need to worry about accidentally swapping the <code>SDA</code> and <code>SCL</code> wires on your breadboard. The Qwiic connector is polarized so you know you\u2019ll have it wired correctly every time.</p> <p>The part numbers for the PCB connector is <code>SM04B-SRSS</code> (Datasheet) and the mating connector on the cables is <code>SHR04V-S-B</code>; or an equivalent 1mm pitch, 4-pin JST connection.</p> <p> </p> <p>It\u2019s time to leverage the power of the I<sup>2</sup>C bus! Most Qwiic boards will have two or more connectors on them, allowing multiple devices to be connected.</p> Jumper Modification <p>To modify the jumpers, users will need soldering equipment and/or a hobby knife.</p> <p>New to jumper pads?</p> <p>Check out our Jumper Pads and PCB Traces Tutorial for a quick introduction!</p> <ul> <li> <p> <p>How to Work with Jumper Pads and PCB Traces</p> <ul> <li> <p> <p>iFixit FixHub - Power Series Portable Soldering Station TOL-27147</p> <li> <p> <p>Hobby Knife TOL-09200</p> <li> <p> <p>Chip Quik No-Clean Flux Pen - 10mL TOL-14579</p> <li> <p> <p>Solder Wick #2 5ft. - Generic TOL-09327</p>"},{"location":"print_view/#suggested-reading","title":"Suggested Reading","text":"<p>As a more sophisticated product, we will skip over the more fundamental tutorials (i.e. Ohm's Law and What is Electricity?). However, below are a few tutorials that may help users familiarize themselves with various aspects of the board.</p> <p>Tip</p> <p>Check out the www.gps.gov website to learn more about the U.S.-owned Global Positioning System (GPS) and the Global Navigation Satellite Systems (GNSS) of other countries.</p> <ul> <li> <p> <p>GPS Basics</p> <li> <p> <p>What is GPS RTK?</p> <li> <p> <p>Quadband GNSS RTK Breakout - LG290P (Qwiic) Hookup Guide</p> <li> <p> <p>Portability Shield Hookup Guide</p> <li> <p> <p>SparkFun RTK Everywhere Product Manual</p> <li> <p> <p>Logic Levels</p> <li> <p> <p>Serial Communication</p> <li> <p> <p>Serial Terminal Basics</p> <li> <p> <p>I2C</p> <li> <p> <p>SPI</p> <li> <p> <p>How to Power a Project</p> <li> <p> <p>How to Solder: Through-Hole Soldering</p> <li> <p> <p>How to Work with Jumper Pads and PCB Traces</p> Related Blog Posts <p>Additionally, users may be interested in these blog post articles on GNSS technologies:</p> <ul> <li> <p> <p>GPS vs GNSS</p> <li> <p> <p>What is Correction Data?</p> <li> <p> <p>Real-Time Kinematics Explained</p> <li> <p> <p>New Video: Unlocking High-Precision RTK Positioning</p> <li> <p> <p>DIY RTK Surveying</p>"},{"location":"print_view/#hardware-overview","title":"Hardware Overview","text":""},{"location":"print_view/#design-files","title":"Design Files","text":"<p>The SparkFun RTK Postcard board's dimensions, pin layout, and connectors are similar to our very popular SparkFun GPS-RTK-SMA Breakout - ZED-F9P (Qwiic) and SparkFun Quadband GNSS RTK Breakout - LG290P (Qwiic). The board features multiple UART ports, which are accessible through the USB-C connector, PTH pins, and 4-pin locking JST connector. Users can also interface with the board through the 19 PTH pins that are broken out around the edge of the board. For the GNSS antenna, an SMA antenna connector is provided on the edge of the board; additionally, users can rework the board to utilize the u.fl connector instead. We also provide two 4-pin JST Qwiic connectors for future use, to operate the board as a peripheral device.</p> <ul> <li> <p>KiCad primary logo Design Files</p> <ul> <li> Schematic</li> <li> KiCad Files</li> <li> STEP Files<ul> <li> RTK Postcard</li> <li> Enclosure </li> </ul> </li> <li> Board Dimensions:<ul> <li>1.70\" x 1.70\" (43.2mm x 43.2mm)</li> <li>Four mounting holes:<ul> <li>4-40 screw compatible</li> </ul> </li> </ul> </li> </ul> </li> <li> 3D ModelDimensions RTK Postcard <p> <p>Download the <code>*.step</code> File</p> Enclosure <p> <p>Download the <code>*.step</code> File</p> Manipulate 3D Model Controls Mouse Touchscreen Zoom Scroll Wheel 2-Finger Pinch Rotate Left-Click &amp; Drag 1-Finger Drag Move/Translate Right-Click &amp; Drag 2-Finger Drag <p>  Dimensions of the RTK Postcard.  </p> Need more measurements? <p>For more information about the board's dimensions, users can download the KiCad files for this board. These files can be opened in KiCad and additional measurements can be made with the measuring tool.</p> <p> KiCad - Free Download!</p> <p>KiCad is free, open-source CAD program for electronics. Click on the button below to download their software. (*Users can find out more information about KiCad from their website.)</p> <p> Download KiCad primary logo </p>  Measuring Tool <p>This video demonstrates how to utilize the dimensions tool in KiCad, to include additional measurements:</p> <p> </p>"},{"location":"print_view/#usb-c-connector","title":"USB-C Connector","text":"<p>The USB connector is provided to power the board and communicate with either the LG290P GNSS receiver or ESP32 microcontroller. For most users, it will be the primary method for interfacing with the RL Postcard.</p> <p></p> <p>USB-C connector on the RTK Postcard.</p>"},{"location":"print_view/#ch342-dual-uart-converter","title":"CH342 Dual UART Converter","text":"<p>The CH342 serial-to-USB converter allows users to interface with the <code>UART1</code> port of the LG290P GNSS module and <code>UART0</code> port of the ESP32-Pico module through the USB-C connector. To utilize the CH342, users may need to install a USB driver, which can be downloaded from the manufacturer website.</p> Tip - USB Drivers <ul> <li> <p> Windows</p> <p> Download Page for <code>CH343SER.EXE</code></p> </li> <li> <p> MacOS</p> <p> Download Page for <code>CH341SER_MAC.ZIP</code></p> </li> </ul> <p>Linux</p> <p>A USB driver is not required for Linux based operating systems.</p> <p></p> <p>The <code>UART</code> channels of the CH342 serial-to-USB converter.</p> <p>Once the USB driver is installed, two virtual <code>COM</code> ports will be emulated and can be utilized as standard <code>COM</code> ports to access the modules:</p> <ul> <li>ESP32 - Users should select <code>COM</code> port labeled with <code>Channel A</code> (often the lower enumeration).</li> <li> <p>LG290P - Users should select <code>COM</code> port labeled with <code>Channel B</code> (often the higher enumeration).</p> UART Settings <ul> <li> <p>ESP32</p> <p>With the RTK Everywhere firmware, the <code>UART0</code> port of the ESP32 is configured with the following settings:</p> <ul> <li>Baudrate: 115200bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> </ul> </li> <li> <p>LG290P</p> <p>With the RTK Everywhere firmware, the <code>UART2</code> port of the LG290P is configured with the following settings:</p> <ul> <li>Baudrate: 460800bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> </ul> Default Configuration <p>The UART ports of the LG290P are configured with the following default settings:</p> <ul> <li>Baudrate: 460800bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> <li>Protocols:<ul> <li><code>NMEA 0183</code></li> <li><code>RTCM 3.x</code></li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"print_view/#power","title":"Power","text":"<p>The RTK Postcard only requires 3.3V to power the board's primary components. The simplest method to power the board is through the USB-C connector. Alternatively, the board can also be powered through the other connectors and PTH pins.</p> <p></p> <p>RTK Postcard's power connections.</p> <p>Below, is a general summary of the power circuitry for the board:</p> <ul> <li><code>5V</code> - The voltage from the USB-C connector, usually 5V.<ul> <li>Can be utilized as the primary power source for the entire board.</li> <li>When connected to the Portability Shield, this pin used to provide power between the boards. (1)</li> </ul> </li> <li><code>3V3</code> - 3.3V power rail, which powers the ESP32 Pico-Mini module, LG290P GNSS module, backup battery, and LEDs.<ul> <li>Power can also be distributed to/from any of the JST connectors (Qwiic or <code>UART3</code>) or the <code>3V3</code> PTH pin.<ul> <li>For power that is supplied through these connections, the LG290P has the tightest voltage supply requirement of 3.15\u20133.45V.</li> </ul> </li> <li>A regulated 3.3V is supplied by the RT9080, when powered from the <code>5V</code> PTH pin or USB connector<ul> <li>Input Voltage Range: 3.0 to 5.5V (2)</li> <li>The RT9080 LDO regulator can source up to 600mA.</li> </ul> </li> </ul> </li> <li><code>3V3_EN</code> - Controls the power output form the RT9080 voltage regulator.<ul> <li>By default, the pin is pulled-up to 5V and to enable the RT9080 output voltage.</li> </ul> </li> <li><code>VCC</code> - The voltage from the locking JST-GH connector, which is controlled by the <code>VSEL</code> jumper (3).<ul> <li>Used to power an external radio to send or receive RTK corrections.</li> </ul> </li> <li><code>GND</code> - The common ground or the 0V reference for the voltage supplies.</li> </ul> <ol> <li> <p>Details</p> <p>When 5V is provided to the RTK Postcard, it will supply power to the Portability Shield and charge the LiPo battery (if connected). To operate properly when charging the battery, the power switch behind the OLED display of the Portability Shield should be in the <code>Off</code> position.</p> <p>When powered by a LiPo battery, users must toggle the power switch behind the OLED display of the Portability Shield to the <code>On</code> position. This will allow the battery power to be provided to the RTK Postcard through the <code>5V</code> pin; and then to its RT9080 LDO.</p> <p>Protection diodes are utilized on the boards to independently prevent current feedback and protect the power sources from each other.</p> </li> <li> <p>Brown Out Voltage</p> <p>The supply voltage of a LiPo battery will decrease as it is drained. However, before the battery can reach its critical UVLO threshold (~2.8V), the LG290 GNSS module with begin to brown out from an in-use supply voltage of 3.05-3.10V from a battery.</p> <p>Battery Capacity</p> <p>When selecting a LiPo battery for any combination of the RTK Postcard, Portability Shield, and/or connected radio, users should be aware of the peak current draw of their setup. In theory, most standard LiPo batteries have a maximum discharge rate of 1C (based on the battery capacity).</p> \\[ 1C = \\frac{(1 * Capacity)}{hour} \\] <p>However, as a battery ages, users may find the effective capacity and discharge rate to degrade to 80% of its original specifications.</p> <p>Example</p> <p>For example, a LiPo battery with a 400mAh capacity will have a maximum discharge rate of 400mA. However, over time, users may notice its effective use diminish to 320mAh and 320mA respectively.</p> </li> <li> <p>By default, the <code>VSEL</code> jumper is configured to utilize the 3.3V power rail; however, it can be connected to the 5V power rail instead.</p> <p>Portability Shield</p> <p>When utilizing the 5V power rail of the RTK Postcard, power may be supplied from the LiPo battery from the Portability Shield. This should be taken into consideration when connecting an external radio for RTK corrections.</p> </li> </ol> <p>Info</p> <p>For more details, users can reference the schematic and the datasheets of the individual components on the board.</p> <p>Portability Shield</p> <p>When used in conjunction with the Portability Shield, users should be aware of the following:</p> <ul> <li>To charge the battery, users must provide adequate power through the <code>5V</code> pin. This is most easily done by powering the boards from the USB-C connector.</li> <li>When operating the boards with the battery power, users must ensure that the switch behind the OLED display is in the <code>On</code> position. This will allow the battery power to feedback to the RTK Postcard through the <code>5V</code> pin; and over to the RT9080 LDO to provide a regulated 3.3V to its primary components.</li> </ul>"},{"location":"print_view/#backup-battery","title":"Backup Battery","text":"<p>While charged, the backup battery allows the GNSS module to hot/warm start with valid ephemeris data (time and GNSS orbital trajectories) that was stored.</p> <p>Time to First Fix:</p> <ul> <li>Cold Start: 28s</li> <li>Warm Start: 28s</li> <li>Hot Start: 1.7s</li> </ul>"},{"location":"print_view/#espressif-logo-esp32-pico-mini","title":"Espressif logo\u00a0 ESP32 Pico-Mini","text":"<p>The brains of the RTK Postcard is an ESP32 Pico-Mini module. The Espressif series of ESP32 modules are a versatile, compact MCU modules with WiFi, BT, and BLE capabilities that target a wide variety of applications. At the core of the ESP32 Pico-Mini module is the ESP32-PICO-V3-02, a System-in-Package device, along with an integrated 8 MB SPI flash, 2 MB SPI PSRAM, and 40 MHz oscillator.</p> <p></p> <p>The ESP32 Pico-Mini module on the RTK Postcard.</p> General Features <ul> <li>Electrical Characteristics:<ul> <li>Operating Voltage: 3.0 - 3.6V</li> <li>Current Consumption:<ul> <li>RF Operation: 368mA (peak)</li> <li>Normal Operation: 20-31mA</li> <li>Light-Sleep: 0.8mA</li> <li>Deep-Sleep: 5\u00b5A</li> </ul> </li> </ul> </li> <li>Xtensa\u00ae Dual-Core 32-bit LX6 Microprocessor (up to 240MHz)<ul> <li>448KB of ROM and 520KB SRAM</li> <li>8MB SPI Flash</li> <li>2MB PSRAM</li> <li>16KB SRAM in RTC</li> </ul> </li> <li>Operating Temperature: -40 to 85\u00b0C</li> </ul> <ul> <li>PCB antenna</li> <li>Wi\u00adF 802.11b/g/n<ul> <li>Bit Rate: up to 150Mbps (802.11n)</li> <li>Frequency Range: 2412 - 2484MHz</li> </ul> </li> <li>Bluetooth<ul> <li>Bluetooth v4.2 Specification:<ul> <li>BR/EDR</li> <li>Bluetooth LE</li> </ul> </li> <li>Transmitter Class: 1, 2, and 3</li> </ul> </li> <li>27 GPIO (including strapping pins)     -</li> <li>Supported Peripherals:<ul> <li>SD card, UART, SPI, SDIO, I2C, LED PWM, Motor PWM, I2S, IR, pulse counter, GPIO, capacitive touch sensor, ADC, DAC, TWAI\u00ae (compatible with ISO 11898-1, i.e. CAN Specification 2.0), Ethernet MAC</li> </ul> </li> </ul> Warning <p>Users should be aware of the following nuances and details of this microcontroller</p> <ul> <li>The ESP32 Pico-Mini is only compatible with 2.4GHz WiFi networks; it will not work on the 5GHz bands.</li> <li>For details on the boot mode configuration, please refer to section 3.3 Strapping Pins of the ESP32 SoC datasheet.</li> </ul> RTK Everywhere Firmware <p>The RTK Postcard comes pre-programmed with latest version of our RTK Everywhere firmware. However, users are free to reprogram the board as they see fit. For more details about the RTK Everywhere firmware, users can refer to the user manual.</p> Firmware Download Mode <p>Users can manually force the board into the serial bootloader with the BOOT button. Please, refer to the Boot Button section below for more information.</p> Power Modes <p>The ESP32 Pico-Mini module has various power modes:</p> <ul> <li>Active -  The chip radio is powered on. The chip can receive, transmit, or listen.</li> <li>Modem Sleep - The CPU is operational and the clock is configurable. The Wi-Fi/Bluetooth   baseband and radio are disabled.</li> <li>Light Sleep - The CPU is paused. The RTC memory and RTC peripherals, as well as the ULP   coprocessor are running.</li> <li>Deep Sleep - Only the RTC memory and RTC peripherals are powered on. The ULP coprocessor is functional.</li> <li>Hibernation - Only one RTC timer on the slow clock and certain RTC GPIO   active.</li> <li>Off - Chip is powered off.</li> </ul> <p>For more information on the power management of the ESP32 Pico-Mini module, pleaser refer to Section 4.4 and Tables: 8 and 9 of the ESP32 Pico-Mini module datasheet.</p>"},{"location":"print_view/#peripherals-and-io-pins","title":"Peripherals and I/O Pins","text":"<p>The ESP32 Pico-Mini module features 27 multifunctional GPIO pins, of which, 11 I/O pins broken out into PTH pins on the RTK Postcard. Meanwhile, others are utilized to interface with the LG290P GNSS receiver or other components on the board (i.e. USB connector, Qwiic connector, etc.). All of the RTK Postcard PTH pins have a .1\" pitch spacing for standard headers and their pin layout is compatible with our Portability Shield.</p> <p></p> <p>The peripheral interfaces and I/O pins on the RTK Postcard.</p> <p>Interfaces:</p> <ul> <li>UART (x2)</li> <li>SPI</li> <li>I<sup>2</sup>C (x2)</li> <li>Event Trigger<sup>4</sup></li> <li>RTK Signal</li> <li>Interrupt</li> <li>PPS Timing Signal</li> <li>LG290P Module Reset</li> </ul> ESP32 GPIO PTH Pin LG290P IO Other <code>GPIO 7</code> <code>SDA0</code> <code>I2C_SDA</code> <code>GPIO 20</code> <code>SCL0</code> <code>I2C_SCL</code> <code>GPIO 13</code> Qwiic <code>SDA</code> <code>GPIO 19</code> Qwiic <code>SCL</code> <code>GPIO 21</code> <code>TXD2</code> <code>GPIO 22</code> <code>RXD2</code> <code>GPIO 33</code> <code>RST</code> <code>RESET_N</code> <code>GPIO 34</code> <code>RTK</code> <code>RTK_STAT</code> LED <code>RTK</code> <code>GPIO 36</code> <code>PPS</code> <code>1PPS</code> LED <code>PPS</code> <code>GPIO 8</code> <code>EVENT</code> <code>EVENT</code> <code>GPIO 32</code> <code>SCK</code> <code>GPIO 25</code> <code>POCI</code> <code>GPIO 26</code> <code>PICO</code> <code>GPIO 27</code> <code>CS</code> <code>GPIO 14</code> <code>AOI</code> <code>GPIO 4</code> LED <code>BT</code> <code>GPIO 0</code> LED <code>STAT</code> General Capabilities <p>With the pin multiplexing capabilities of the ESP32 SoC, various pins can have several functionalities. For more technical specifications on the I/O pins, please refer to the ESP32 SoC datasheet.</p> <ul> <li>18x 12-bit analog to digital converter (ADC) channels</li> <li>3x UARTs (only two are configured by default in the Arduino IDE, one UART is used for bootloading/debug)</li> <li>3x SPI (only one is configured by default in the Arduino IDE)</li> <li>2x I<sup>2</sup>C (only one is configured by default in the Arduino IDE)</li> <li>2x digital-to-analog converter (DAC) channels</li> <li>16x 20-bit PWM outputs</li> <li>10x Capacitive Touch Inputs</li> </ul> <p>Warning</p> <p>Users should be aware of the following nuances of the ESP32 Pico-Mini module:</p> <ul> <li>\u26a1 All the GPIO are 3.3V pins.<ul> <li>The I/O pins are not 5V-tolerant! To interface with higher voltage components, a logic level adapter is recommended.</li> </ul> </li> <li>\u26a1  There are electrical limitations to the amount of current that the ESP32 Pico-Mini module can sink or source. For more details, check out the ESP32 Pico-Mini module datasheet.</li> <li>There are some limitations to the ADC performance, see the Note from the ADC Characteristics section of the ESP32 SoC datasheet.</li> </ul> Programming in Arduino <p>To program the ESP32 Pico-Mini module in the Arduino IDE, users should select the ESP32 &gt; ESP32 Dev Module from the Board Manager list. Users should also be aware that not all of the features, listed above, will be available in the Arduino IDE. When programming the module with the Arduino IDE, only the following features are available for the board:</p> <ul> <li>Only one I<sup>2</sup>C bus is defined.</li> <li>Only two UART interfaces are available.<ul> <li>UART (USB): <code>Serial</code></li> <li><code>RX</code>/<code>TX</code> Pins: <code>Serial1</code></li> </ul> </li> <li>Only one SPI bus is defined.</li> </ul> <p>For the full capabilities of the ESP32, the Espressif IDF should be utilized.</p> <p>General Functions</p> <p>For digital pins, users will need to declare the <code>pinMode()</code> (link) in the setup of their sketch (programs written in the Arduino IDE) for the pins used.</p> <ul> <li> <p>Input</p> <p>When configured properly, an input pin will be looking for a <code>HIGH</code> or <code>LOW</code> state. Input pins are high impedance and takes very little current to move the input pin from one state to another.</p> </li> <li> <p>Output</p> <p>When configured as an output the pin will be at a <code>HIGH</code> or <code>LOW</code> voltage. Output pins are low impedance; this means that they can provide a relatively substantial amount of current to other circuits.</p> </li> </ul> <p>Additional Functions</p> <p>There are several pins that have special functionality in addition to general digital I/O. These pins and their additional functions are listed in the tabs below. For more technical specifications on the I/O pins, you can refer to the schematic, ESP32 Pico-Mini module datasheet, ESP32 SoC datasheet, and documentation for the ESP32 Arduino core.</p> Analog PinsPWM &amp; Analog (DAC) PinsSerial PinsSPI PinsI<sup>2</sup>C Pins <p>The ESP32 module provides a 12-bit ADC input on eighteen of its I/O pins. This functionality is accessed in the Arduino IDE using the <code>analogRead(pin)</code> function. (*The available ADC pins are highlighted in the image below.)</p> <p>  Analog input pins on the RTK Postcard.  </p> <p>Tip</p> <p>To learn more about analog vs. digital signals, check out this great tutorial.</p> <ul> <li> <p> <p>Analog vs. Digital</p> <p>Arduino</p> <p>By default, in the Arduino IDE, <code>analogRead()</code> returns a 10-bit value. To change the resolution of the value returned by the <code>analogRead()</code> function, use the <code>analogReadResolution(bits)</code> function.</p> <p>The ESP32 module supports up to sixteen channels of 20-bit PWM (Pulse Width Modulation) outputs on any of its I/O pins. This is accessed in the Arduino IDE using the <code>analogWrite(pin, value)</code> function. (*Any I/O pin can be used for the PWM outputs; the available DAC pins, with true analog outputs, are highlighted in the image below.)</p> <p>  Any I/O pin can be a PWM output, but these are the DAC pins on the RTK Postcard.  </p> <p>Tip</p> <p>To learn more about pulse width modulation (PWM), check out this great tutorial.</p> <ul> <li> <p> <p>Pulse Width Modulation</p> <p>Arduino</p> <p>By default, in the Arduino IDE, <code>analogWrite()</code> accepts an 8-bit value. To change the resolution of the PWM signal for the <code>analogWrite()</code> function, use the <code>analogWriteResolution(bits)</code> function.</p> <p>The ESP32 module provides three UART ports. By default, the UART port for the USB connection (<code>Serial</code>) and the UART port (<code>Serial1</code>) to the LG290P GNSS receiver can be accessed through the Arduino IDE using the serial communication class.</p> <p>  Default UART ports on the RTK Postcard.  </p> <p>Tip</p> <p>To learn more about serial communication, check out this great tutorial.</p> <ul> <li> <p> <p>Serial Communication</p> <p>Arduino</p> <p>By default, in the Arduino IDE, the ESP32 Dev Module board definition supports:</p> <ul> <li><code>Serial</code> - UART (USB)</li> <li><code>Serial1</code> - Pins: <code>RX</code>/<code>TX</code> (<code>GPIO 21</code>/<code>GPIO 22</code>)</li> </ul> <p>Tip</p> <p>We have noticed that with the ESP32 Arduino core, <code>Serial.available()</code> does not operate instantaneously. This is due to an interrupt triggered by the UART, to empty the FIFO when the <code>RX</code> pin is inactive for two byte periods:</p> <ul> <li> <p>At 9600 baud, <code>hwAvailable</code> takes about 11 ms before the UART indicates that data was received from: <code>\\r\\nERROR\\r\\n</code>.</p> \\[ (bytes + 2) * 1ms = 11ms \\] </li> <li> <p>At 115200 baud, <code>hwAvailable</code> takes about 1 ms before the UART indicates that data was received from: <code>\\r\\nERROR\\r\\n</code>.</p> \\[ (bytes + 2) * .087ms = 1ms \\] </li> </ul> <p>For more information, please refer to this chatroom discussion.</p> <p>The ESP32 module provides three SPI buses. By default, in the Arduino IDE, the SPI class is configured to utilize pins <code>GPIO 32</code> (SCK), <code>GPIO 25</code> (POCI), <code>GPIO 26</code> (PICO), and <code>GPIO 27</code> (<code>SS</code>) for its chip select. In order to utilize the other SPI ports or objects, users will need to create a custom SPI object and declare which pins to access.</p> <p>  Default SPI bus connections on the RTK Postcard.  </p> <p>Tip</p> <p>To learn more about the serial peripheral interface (SPI) protocol, check out this great tutorial.</p> <ul> <li> <p> <p>Serial Peripheral Interface (SPI)</p> <p>Arduino</p> <p>By default, in the Arduino IDE, the ESP32 Dev Module board definition supports:</p> SCK <code>GPIO 32</code> (<code>SCK</code>) SDI or POCI <code>GPIO 25</code> (<code>MISO</code>) SDO or PICO <code>GPIO 26</code> (<code>MOSI</code>) CS* <code>GPIO 27</code> (<code>SS</code>) Signal Nomenclature <p>To comply with the latest OSHW design practices, we have adopted the new SPI signal nomenclature (SDO/SDI and PICO/POCI). The terms Master and Slave are now referred to as Controller and Peripheral. The <code>MOSI</code> signal on a controller has been replaced with <code>SDO</code> or <code>PICO</code>. Please refer to this announcement on the decision to deprecate the MOSI/MISO terminology and transition to the SDO/SDI naming convention.</p> <p>The ESP32 module module can support up to two I<sup>2</sup>C buses. By default, in the Arduino IDE, the Wire class is configured to utilize pins <code>GPIO 20</code> (SDA) and <code>GPIO 7</code> (SCL). These pins share the same I<sup>2</sup>C bus with the LG290P GNSS receiver, but not the Qwiic connector. In order to utilize another I<sup>2</sup>C port, users will need to create a custom Wire object and declare which pins to access.</p> <p>  Default I<sup>2</sup>C bus connections for the RTK Postcard.  </p> <p>Tip</p> <p>To learn more about the inter-integrated circuit (I<sup>2</sup>C) protocol, check out this great tutorial.</p> <ul> <li> <p> <p>I2C</p> <p>Arduino</p> <p>By default, in the Arduino IDE, the ESP32 Dev Module board definition supports:</p> SCL0 <code>GPIO 7</code> (<code>SCL</code>) SDA0 <code>GPIO 20</code> (<code>SDA</code>)"},{"location":"print_view/#quectel-logo-lg290p-gnss","title":"Quectel logo\u00a0 LG290P GNSS","text":"<p>The centerpiece of the RTK Postcard, is the LG290P GNSS module from Quectel. The LG290P is a low-power, multi-band, multi-constellation GNSS receiver capable of delivering centimeter-level precision at high update rates. The built-in NIC anti-jamming unit provides professional-grade interference signal detection and elimination algorithms, which effectively mitigate against multiple narrow-band interference sources and significantly improves the signal reception performance in complex electromagnetic environments. With its performance advantages of high-precision and power consumption, this board is an ideal choice for high-precision navigation applications, such as intelligent robots, UAVs, precision agriculture, mining, surveying, and autonomous navigation.</p> <p></p> <p>The LG290P module on the RTK Postcard.</p>  ![QR code to product video](./assets/img/qr_code/quectel_video.png){ .qr width=100 }  General Features <ul> <li>Supply Voltage: 3.15 \u2013 3.45V</li> <li>Tracking Channels: 1040</li> <li>Concurrent signal reception: 5 + QZSS<ul> <li><code>L1</code>, <code>L2</code>, <code>L5</code>, <code>E6</code> frequency bands</li> </ul> </li> <li>Sensitivity:<ul> <li>Acquisition: -146dBm</li> <li>Tracking: -160dBm</li> <li>Reacquisition: -155dBm</li> </ul> </li> <li>Antenna Power: External or Internal</li> <li>GNSS Constellations and SBAS Systems:<ul> <li>USA: GPS + WASS</li> <li>Russia: GLONASS + SDCM</li> <li>EU: Galileo + EGNOS</li> <li>China: BDS + BDSDAS</li> <li>Japan: QZSS + MSAS</li> <li>India: NavIC + GAGAN</li> </ul> </li> <li>Accuracy of 1PPS Signal: 5ns (RMS)</li> <li>Update Rate:<ul> <li>Default: 10Hz</li> <li>Max: 20Hz</li> </ul> </li> </ul> <ul> <li>Time to First Fix (without AGNSS):<ul> <li>Cold Start: 28s</li> <li>Warm Start: 28s</li> <li>Hot Start: 1.7s</li> </ul> </li> <li>RTK Convergence Time: 5s</li> <li>Dynamic Performance:<ul> <li>Maximum Altitude: 10000m</li> <li>Maximum Velocity: 490m/s</li> <li>Maximum Acceleration: 4g</li> </ul> </li> <li>Built-in NIC anti-jamming unit</li> <li>Interfaces<ul> <li>UART (x3)<ul> <li>Baud Rate: 9600\u20133000000bps<ul> <li>Default: 460800bps</li> </ul> </li> <li>Protocol: <code>NMEA 0183</code>/<code>RTCM 3.x</code></li> </ul> </li> <li>SPI<sup>1</sup> (x1)</li> <li>I<sup>2</sup>C<sup>1</sup> (x1)</li> </ul> </li> <li>Operating temperature: -40\u00b0C to +85\u00b0C</li> <li>Footprint: 12.2mm \u00d7 16mm \u00d7 2.6mm</li> <li>Weight: ~0.9g</li> </ul> Supported Frequency Bands <p>The LG290P modules are multi-band, multi-constellation GNSS receivers. Below, is a chart illustrating the frequency bands utilized by all the global navigation satellite systems; along with a list of the frequency bands and GNSS systems supported by the LG290P GNSS module.</p> <p>  Frequency bands of the global navigation satellite systems. (Source: Tallysman)  </p> <p>Supported Frequency Bands:</p> <ul> <li>GPS: <code>L1 C/A</code>, <code>L1C</code><sup>2</sup>, <code>L5</code>, <code>L2C</code></li> <li>GLONASS: <code>L1</code>, <code>L2</code></li> <li>Galileo: <code>E1</code>, <code>E5a</code>, <code>E5b</code>, <code>E6</code></li> <li>BDS: <code>B1I</code>, <code>B1C</code>, <code>B2a</code>, <code>B2b</code>, <code>B2I</code>, <code>B3I</code></li> <li>QZSS: <code>L1 C/A</code>, <code>L1C</code><sup>2</sup>, <code>L5</code>, <code>L2C</code></li> <li>NavIC: <code>L5</code></li> <li>SBAS: <code>L1 C/A</code></li> <li>L-band PPP<sup>3</sup>:<ul> <li>PPP: <code>B2b</code></li> <li>QZSS: <code>L6</code></li> <li>Galileo HAS: <code>E6</code></li> </ul> </li> </ul> <p>Supported GNSS Constellations:</p> <ul> <li>GPS (USA)</li> <li>GLONASS (Russia)</li> <li>Galileo (EU)</li> <li>BDS (China)</li> <li>QZSS (Japan)</li> <li>NavIC (India)</li> </ul> <p>Supported SBAS Systems:</p> <ul> <li>WASS (USA)</li> <li>SDCM (Russia)</li> <li>EGNOS (EU)</li> <li>BDSBAS (China)</li> <li>MSAS (Japan)</li> <li>GAGAN (India)</li> </ul> <p>Info</p> <p>For a comparison of the frequency bands supported by the LG290P GNSS modules, refer to sections 1.2, 1.5, and 1.6 of the hardware design manual.</p> What are Frequency Bands? <p>A frequency band is a section of the electromagnetic spectrum, usually denoted by the range of its upper and lower limits. In the radio spectrum, these frequency bands are usually regulated by region, often through a government entity. This regulation prevents the interference of RF communication; and often includes major penalties for any interference with critical infrastructure systems and emergency services.</p> <p>  Frequency bands of the global navigation satellite systems. (Source: ESA)  </p> <p>However, if the various GNSS constellations share similar frequency bands, then how do they avoid interfering with one another? Without going too far into detail, the image above helps illustrate some of the characteristics, specific to the frequency bands of each system. With these characteristics in mind, along with other factors, the chart can help users to visualize how multiple GNSS constellations might co-exist with each other.</p> <p>For more information, users may find these articles of interest:</p> <ul> <li>GNSS signal</li> <li>GPS Signal Plan</li> <li>GLONASS Signal Plan</li> <li>GALILEO Signal Plan</li> </ul> GNSS Accuracy <p>The accuracy of the position reported from the LG290P GNSS module, can be improved based upon the correction method being employed. Currently, RTK corrections provide the highest level of accuracy; however, users should be aware of certain limitations of the system:</p> <ul> <li>RTK technique requires real-time correction data from a reference station or network of base stations.<ul> <li>RTK corrections usually come from RTCM messages that are signal specific (i.e. an RTK network may only provide corrections for specific signals; only <code>E5b</code> and not <code>E5a</code>).</li> </ul> </li> <li>The range of the base stations will vary based upon the method used to transmit the correction data.</li> <li>The reliability of RTK corrections are inherently reduced in multipath environments.</li> </ul> Correction Method Horizontal Vertical Velocity Standalone 0.7m~2.3' 2.5m~8.2' 3cm/s (0.108kph)~1.2in/s (0.067mph) RTK 0.8cm (+1ppm)~0.3\" 1.5cm (+1ppm)~.6\" RTK Corrections <p>To understand how RTK works, users will need a more fundamental understanding of the signal error sources.</p> <ul> <li> <p> <p>Real-Time Kinematics Explained</p> <li> <p> <p>What is Correction Data?</p>"},{"location":"print_view/#peripherals-and-io-pins_1","title":"Peripherals and I/O Pins","text":"<p>The LG290P GNSS features several peripheral interfaces and I/O pins. Some of these are broken out as PTH pins on the RTK Postcard; whereas, others are broken out to their specific interface (i.e. USB connector, JST connector, etc.). Additionally, some of their connections are tied to other components on the board.</p> <p></p> <p>The peripheral interfaces and I/O pins on the RTK Postcard.</p> <p>Interfaces:</p> <ul> <li>UART (x3)</li> <li>SPI<sup>1</sup></li> <li>I<sup>2</sup>C<sup>1</sup></li> <li>Event Trigger<sup>4</sup></li> <li>Timing Signal</li> <li>RTK Signal</li> <li>Module Reset</li> </ul> UARTsPPS OutputRTKReset <p>The LG290P GNSS has three UART ports, which can be operated and configured separately.</p> <p>  The UART ports on the RTK Postcard.  </p> UART Settings <p>With the RTK Everywhere firmware, the UART ports of the LG290P are configured with the following baudrates:</p> UART Port Interface Baudrate (bps) <code>UART1</code> USB-C (CH342) 460800 <code>UART2</code> ESP32 460800 <code>UART3</code> JST-GH (Locking) 57600 Default Configuration <p>The UART ports of the LG290P are configured with the following default settings:</p> <ul> <li>Baudrate: 460800bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> <li>Protocols:<ul> <li><code>NMEA 0183</code></li> <li><code>RTCM 3.x</code></li> </ul> </li> </ul> Pin Connections <p>When connecting to the board's UART pins to another device, the pins should be connected based upon the flow of their data.</p> <p> Board RX TX GND UART Device TX RX GND </p> <code>UART1</code><code>UART2</code><code>UART3</code> <p><code>UART1</code> can only be accessed from the USB-C connector, through the CH342 serial-to-USB converter. For Windows and MacOS computers (1), a USB driver must be installed in order to communicate with the LG290P module through the CH342 converter. Once the USB driver is installed:</p> <ul> <li>Two virtual <code>COM</code> ports are emulated, which can be used as standard <code>COM</code> ports to access the ESP32 or the LG290P modules.</li> <li>Users should select <code>COM</code> port listed as <code>Channel B</code> to access the LG290P GNSS receiver.</li> </ul> <ol> <li>On Linux, the standard Linux CDC-ACM driver is suitable.</li> </ol> <p><code>UART2</code> is connected to the ESP32 Pico-Mini.</p> ESP32 LG290P IO21: <code>GPIO 21</code> <code>TXD2</code> IO22: <code>GPIO 22</code> <code>RXD2</code> <p><code>UART3</code> is available through the breakout PTH pins or the locking JST connector. The pin layout of the 4-pin locking JST connector is compatible with many of our serial radios and adapter cables.</p> UART Protocols <p>From the module, the PPS output signal is a 3.3V signal output that can be access through the SMA connector and/or the <code>PPS</code> PTH pin. The signal is also connected to the <code>PPS</code> LED, which can be used as a visual indicator for its operation.</p> <p>  The timing signal's outputs on the RTK Postcard.  </p> Jumpers <p>See the Jumpers section for more details.</p> <ul> <li>There is a jumper attached to the <code>PPS</code> PTH pin. When cut, it disconnects the pin from the PPS signal.</li> <li>There is a jumper attached to the <code>PPS</code> LED. For low power applications, the jumper can be cut to disable the <code>PPS</code> LED.</li> </ul> Use Case <ul> <li>Users could use this signal in conjunction with the event pins to synchronize two modules with each other.</li> <li>Users could use this signal to create their own Stratum 0 source for the NTP on a primary time server.</li> </ul> <p>The <code>RTK</code> PTH pin operates as both the <code>RTK_STAT</code> status indicator for the RTK positioning and <code>ANT_ON</code> power control for the external LNA or active antenna power. The pin is also connected to the <code>RTK</code> LED, which can be used as a visual indicator for its operation.</p> <p>  The RTK signal's outputs on the RTK Postcard.  </p> <code>RTK_STAT</code><code>ANT_ON</code> <p>In this configuration, the pin is set to a high level at startup.</p> <ol> <li>If the pin output is high, it indicates the module has entered the RTK fixed mode.</li> <li>If the pin output is low, it indicates that the module exited the RTK fixed mode.</li> <li>If the pin outputs an alternating pin level, it indicates that the module received the correct RTCM data and did not enter the RTK fixed mode.</li> </ol> <p>In this configuration, the pin is used to control the external LNA or active antenna power supply.</p> <ul> <li>When the pin is high, the antenna is powered.</li> <li>When the pin is low, the antenna is not powered.</li> </ul> Jumpers <p>See the Jumpers section for more details.</p> <ul> <li>There is a jumper attached to the <code>RTK</code> LED. For low power applications, the jumper can be cut to disable the <code>RTK</code> LED.</li> </ul> <p>The <code>RST</code> pin can be used to reset the LG290P module if it enters an abnormal state. To reset the GNSS module, the pin must be low for more than 100ms.</p> <p>  The <code>RST</code> pin on the RTK Postcard.  </p>"},{"location":"print_view/#uart-protocols","title":"UART Protocols","text":"<p>By default, these UART ports are configured to transmit and receive <code>NMEA 0183</code> and/or <code>RTCM 3.x</code> messages. These messages are generally used for transmitting PNT data; and providing or receiving RTK corrections, respectively. Quectel also implements a system of proprietary messages (<code>PQTM</code>) for users to configure the LG290P that follows a data format similar to the <code>NMEA</code> protocol. The expected structure of these proprietary messages is shown below:</p> <p>  The data structure of Quectel messages for the <code>NMEA</code> protocol.  </p> NMEAPQTMRTCM <p>A full list of compatible <code>NMEA 0183</code> v4.11 messages, is provided in section 2.2. Standard Messages of the GNSS Protocol Specification manual. This protocol is used for outputting GNSS data, as detailed by the National Marine Electronics Association organization.</p> List of Standard NMEA Messages Message Type Mode Message Description RMC Output Recommended Minimum Specific GNSS Data GGA Output Global Positioning System Fix Data GSV Output GNSS Satellites in View GSA Output GNSS DOP and Active Satellites VTG Output Course Over Ground &amp; Ground Speed GLL Output Geographic Position \u2013 Latitude/Longitude <p>A full list of PQTM messages (proprietary NMEA messages defined by Quectel) supported by LG290P, is provided in section 2.3. PQTM Messages of the GNSS Protocol Specification manual. This protocol is used to configure or read the settings for the LG290P GNSS module.</p> List of Proprietary Quectel Messages Message Type Mode Message Description PQTMVER Output Outputs the firmware version PQTMCOLD Input Performs a cold start PQTMWARM Input Performs a warm start PQTMHOT Input Performs a hot start PQTMSRR Input Performs a system reset and reboots the receiver PQTMUNIQID Output Queries the module unique ID PQTMSAVEPAR Input Saves the configurations into NVM PQTMRESTOREPAR Input Restores the parameters configured by all commands to their default values PQTMVERNO Output Queries the firmware version PQTMCFGUART Input/Output Sets/gets the UART interface PQTMCFGPPS Input/Output Sets/gets the PPS feature PQTMCFGPROT Input/Output Sets/gets the input and output protocol for a specified port PQTMCFGNMEADP Input/Output Sets/gets the decimal places of standard NMEA messages PQTMEPE Output Outputs the estimated position error PQTMCFGMSGRATE Input/Output Sets/gets the message output rate on the current interface PQTMVEL Output Outputs the velocity information PQTMCFGGEOFENCE Input/Output Sets/gets geofence feature PQTMGEOFENCESTATUS Output Outputs the geofence status PQTMGNSSSTART Input Starts GNSS engine PQTMGNSSSTOP Input Stops GNSS engine PQTMTXT Output Outputs short text messages PQTMCFGSVIN Input/Output Sets/gets the Survey-in feature PQTMSVINSTATUS Output Outputs the Survey-in status PQTMPVT Output Outputs the PVT (GNSS only) result PQTMCFGRCVRMODE Input/Output Sets/gets the receiver working mode PQTMDEBUGON Input Enables debug log output PQTMDEBUGOFF Input Disables debug log output PQTMCFGFIXRATE Input/Output Sets/gets the fix interval PQTMCFGRTK Input/Output Sets/gets the RTK mode PQTMCFGCNST Input/Output Sets/gets the constellation configuration PQTMDOP Output Outputs dilution of precision PQTMPL Output Outputs protection level information PQTMCFGODO Input/Output Sets/gets the odometer feature PQTMRESETODO Input Resets the accumulated distance recorded by the odometer PQTMODO Output Outputs the odometer information PQTMCFGSIGNAL Input/Output Sets/gets GNSS signal mask PQTMCFGSAT Input/Output Sets/gets GNSS satellite mask PQTMCFGRSID Input/Output Sets/gets the reference station ID PQTMCFGRTCM Input/Output Sets/gets RTCM <p>A full list of compatible <code>RTCM v3</code> messages, is provided in section 3. RTCM Protocol of the GNSS Protocol Specification manual. This protocol is used for transferring GNSS raw measurement data, as detailed by the Radio Technical Commission for Maritime Services organization.</p> List of Supported RTCMv3 (MSM) Messages Message Type Mode Message Description 1005 Input/Output Stationary RTK Reference Station ARP 1006 Input/Output Stationary RTK Reference Station ARP with height 1019 Input/Output GPS Ephemerides 1020 Input/Output GLONASS Ephemerides 1041 Input/Output NavIC/IRNSS Ephemerides 1042 Input/Output BDS Satellite Ephemeris Data 1044 Input/Output QZSS Ephemerides 1046 Input/Output Galileo I/NAV Satellite Ephemeris Data 1073 Input/Output GPS MSM3 1074 Input/Output GPS MSM4 1075 Input/Output GPS MSM5 1076 Input/Output GPS MSM6 1077 Input/Output GPS MSM7 1083 Input/Output GLONASS MSM3 1084 Input/Output GLONASS MSM4 1085 Input/Output GLONASS MSM5 1086 Input/Output GLONASS MSM6 1087 Input/Output GLONASS MSM7 1093 Input/Output Galileo MSM3 1094 Input/Output Galileo MSM4 1095 Input/Output Galileo MSM5 1096 Input/Output Galileo MSM6 1097 Input/Output Galileo MSM7 1113 Input/Output QZSS MSM3 1114 Input/Output QZSS MSM4 1115 Input/Output QZSS MSM5 1116 Input/Output QZSS MSM6 1117 Input/Output QZSS MSM7 1123 Input/Output BDS MSM3 1124 Input/Output BDS MSM4 1125 Input/Output BDS MSM5 1126 Input/Output BDS MSM6 1127 Input/Output BDS MSM7 1133 Input/Output NavIC/IRNSS MSM3 1134 Input/Output NavIC/IRNSS MSM4 1135 Input/Output NavIC/IRNSS MSM5 1136 Input/Output NavIC/IRNSS MSM6 1137 Input/Output NavIC/IRNSS MSM7"},{"location":"print_view/#buttons","title":"Buttons","text":"<p>There are two buttons on RTK Postcard; a RST and BOOT button.</p> <p></p> <p>RST and BOOT buttons on the RTK Postcard.</p> ResetBoot"},{"location":"print_view/#reset-button","title":"Reset Button","text":"<p>The RST (reset) button allows users to reset the program running on the ESP32 Pico-Mini module without unplugging the board.</p>"},{"location":"print_view/#boot-button","title":"Boot Button","text":"<p>The BOOT button can be used to force the board into the serial bootloader. Holding down the BOOT button, while connecting the board to a computer through its USB-C connector or resetting the board will cause it to enter the Firmware Download mode. The board will remain in this mode until it power cycles (happens automatically after uploading new firmware) or the RST button is pressed.</p> <ol> <li>Hold the BOOT button down.</li> <li>Reset the MCU.<ul> <li>While unpowered, connect the board to a computer with through the USB-C connection.</li> <li>While powered, press the RST button.</li> </ul> </li> <li>Release the BOOT button.</li> <li>After programming is completed, reboot the MCU.<ul> <li>Press the RST button.</li> <li>Power cycle the board.</li> </ul> </li> </ol>"},{"location":"print_view/#gnss-antenna-connectors","title":"GNSS Antenna Connectors","text":"<p>While there are two GNSS antenna connectors, only the SMA connector is connected to the LG290P GNSS module by default. If users wish, they can rework the 0402 resistor on the antenna trace to utilize the u.fl connector instead.</p> <p></p> <p>The SMA connector for an external GNSS antenna on the RTK Postcard.</p> <p></p> <p>The u.fl connector for the PPS output from the RTK Postcard.</p> <p>Antenna Specifications</p> <ul> <li>Passive antennas are not recommended for the LG290P GNSS module.</li> <li>To mitigate the impact of out-of-band signals, utilize an active antenna whose SAW filter is placed in front of the LNA in the internal framework.<ul> <li>DO NOT select and antenna with the LNA placed in the front.</li> </ul> </li> <li>There is no need to inject an external DC voltage into the SMA connector for the GNSS antenna. Power is already provided from the LG290P module for the LNA of an active antenna.</li> </ul>"},{"location":"print_view/#jst-connector","title":"JST Connector","text":"<p>The RTK Postcard features a 4-pin JST GH connector, which is polarized and locking. Users can access the pins of the <code>UART3</code> port, through the JST connector with our breadboard cable(1) or through the PTH pins. The pin layout of the JST connector is compatible with many of our serial radios and adapter cables.</p> <ol> <li> <p> <p>Breadboard to JST-GHR-04V Cable - 4-Pin x 1.25mm Pitch CAB-17240</p> <p></p> <p>The JST connector on the RTK Postcard.</p> Default Baudrate <ul> <li>The default bardrate of the <code>UART</code> ports from the LG290P is 480600bps, with the factory settings.</li> <li>The default bardrate of the <code>UART3</code> port from the LG290P (for the locking JST connector) is 57600bps, when utilizing the pre-programmed RTK Everywhere firmware.</li> </ul> Pin Connections"},{"location":"print_view/#pin-connections","title":"Pin Connections","text":"<p>When connecting the RTK Postcard to other products, users need to be aware of the pin connections between the devices.</p> <p> Pin Number 1 (Left Side) 2 3 4 Label VCC TX3 RX3 GND Function Voltage Output     - Default: 3.3V     - Selectable: 3.3V or 5V  <code>UART3</code> - Receive <code>UART3</code> - Transmit Ground </p> <p>When connecting the RTK Postcard to our radios, the pin connections should follow the table below. If the flow control is not enabled, the only the <code>RX</code>, <code>TX</code>, and <code>GND</code> pins are utilized.</p> <p> Board RX TX GND Radio TX RX GND </p> <p>As documented in the LoRaSerial product manual, the pin connections between a host system (i.e. RTK Postcard) and the LoRaSerial Kit radio is outlined in the image below.</p> <p>  The <code>COM</code> ports on the RTK Postcard.  </p>"},{"location":"print_view/#status-leds","title":"Status LEDs","text":"<p>There are five status LEDs on the RTK Postcard. The table below, lists the pin connections between these LEDs, the LG290P GNSS module, and the ESP32 Pico-Mini module. For details about their operation, please refer to the list at the underneath.</p>   | LED    | ESP32 GPIO | LG290P IO  | | :----: | :--------- | :--------- | | `BT`   | `GPIO 4`   | ---        | | `RTK`  | `GPIO 34`  | `RTK_STAT` | | `PPS`  | `GPIO 36`  | `1PPS`     | | `PWR`  | N/A        | N/A        | | `STAT` | `GPIO 0`   | ---        |   <p></p> <p>The status LED indicators on the RTK Postcard.</p> <ul> <li><code>BT</code> - Bluetooth (Blue)<ul> <li>With the RTK Everywhere firmware, this LED indicates when the ESP32 Pico-Mini module is paired with a Bluetooth device</li> </ul> </li> <li><code>RTK</code> - RTK Mode (White)<ul> <li>Indicates when an RTK fix has been established or when the correct RTCM data is being received (see the RTK section)</li> </ul> </li> <li><code>PPS</code> - Pulse-Per-Second (Yellow)<ul> <li>Indicates when there is a pulse-per-second signal (see the PPS Output section)</li> </ul> </li> <li><code>PWR</code> - Power (Red)<ul> <li>Turns on once 3.3V power is supplied to the board</li> </ul> </li> <li><code>STAT</code> - Status (Green)<ul> <li>With the RTK Everywhere firmware, this LED indicates the operation mode</li> </ul> </li> </ul>"},{"location":"print_view/#jumpers","title":"Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction!</p> <ul> <li> <p> <p>How to Work with Jumper Pads and PCB Traces</p> <p>There are eight jumpers on the back of the board that can be used to easily modify the hardware connections on the board. From which, there are five jumpers that control power to the status LEDs on the board. By default, all the jumpers are connected to power the status LEDs. For low power applications, users can cut the jumpers to disconnect power from each of the LEDs.</p> <p></p> <p>The jumpers on the back of the RTK Postcard.</p> <ul> <li><code>I2C-EXT</code> - This jumper can be cut to disconnect the pull-up resistors on the <code>SCL_1</code> and <code>SDA_1</code> connections of the Qwiic connectors.</li> <li><code>SHLD</code> - This jumper can be cut to disconnect the shielding of the USB-C connector from the <code>GND</code> plane of the board</li> <li><code>VSEL</code> - This jumper can be modified to configure/disconnect the <code>VCC</code> pin of the 4-pin locking JST connector to/from <code>3V3</code> or <code>5V</code> power rails.<ul> <li>Users should also keep in mind that connecting the jumper to the <code>5V</code> power rail, could include the voltage provided by the LiPo battery from the Portability Shield.</li> </ul> </li> <li><code>STAT</code> - This jumper can be cut to remove power from the green LED, indicating the operational status for the RTK Everywhere firmware.</li> <li><code>PWR</code> - This jumper can be cut to remove power from the red, power LED.</li> <li><code>PPS</code> - This jumper can be cut to remove power from the yellow LED, which is connected to the PPS signal.</li> <li><code>RTK</code> - This jumper can be cut to remove power from the white LED, indicating RTK fix or operation in RTK mode.</li> <li><code>BT</code> - This jumper can be cut to remove power from the blue LED, indicating Bluetooth pairing for the RTK Everywhere firmware.</li> </ul> <p>Default Configuration</p> <ul> <li>By default, PPS signal is connected to the <code>PPS</code> pin.</li> <li>By default, the <code>VSEL</code> jumper is connected to <code>3V3</code> pad for a regulated 3.3V output on the 4-pin JST-GH connector.</li> <li>By default, the <code>BT_VCC</code> jumper provides a regulated 3.3V output to the BlueSMiRF header.</li> </ul>"},{"location":"print_view/#hardware-assembly","title":"Hardware Assembly","text":""},{"location":"print_view/#usb-programming-uart1","title":"USB Programming (<code>UART1</code>)","text":"<p>The USB connection can be utilized for serial communication and configuring the LG290P GNSS module. Users only need to connect their RTK Postcard to a computer, using a USB-C cable.</p> <p></p> <p>The RTK Postcard with USB-C cable being attached.</p> <p>Default Baud Rate</p> <p>The default baud rate of the UART ports on the LG290P is 460800bps.</p>"},{"location":"print_view/#gnss-antenna","title":"GNSS Antenna","text":"<p>In order to receive GNSS signals, users will need to connect a compatible antenna. For the best performance, we recommend users choose an active, multi-band GNSS antenna and utilize a low-loss cable.</p> Antenna Specifications <ul> <li>Passive antennas are not recommended for the LG290P GNSS module.</li> <li>To mitigate the impact of out-of-band signals, utilize an active antenna whose SAW filter is placed in front of the LNA in the internal framework.<ul> <li>DO NOT select and antenna with the LNA placed in the front.</li> </ul> </li> <li>There is no need to inject an external DC voltage into the SMA connector for the GNSS antenna. Power is already provided from the LG290P module for the LNA of an active antenna.</li> </ul> <p></p> <p>A compact, helical GNSS antenna attached to the SMA connector on the RTK Postcard.</p> <p></p> <p>A GNSS survey antenna attached to the SMA connector on the RTK Postcard.</p>"},{"location":"print_view/#jst-connector-uart3","title":"JST Connector (<code>UART3</code>)","text":"<p>The JST connector on the Quad-band GNSS RTK board, breaks out the <code>UART3</code> port of the LG290P GNSS module. In most circumstances, users will utilize the JST connector to interface with one of our radios to transmit or receive RTK correction data.</p> <p></p> <p>The Telemetry Radio v3 connected to the RTK Postcard.</p> <p>When connecting the RTK Postcard to other products, users should be aware of the pin connections between the devices. The table below, details the pin connections of the locking JST connector on the RTK Postcard.</p> Pin Number      **1**     *(Left Side)*  2 3 4 Label VCC TX3 RX3 GND Function **Voltage Output**     - **Default: 3.3V**     - 3.3V or 5V  `UART3` - Receive `UART3` - Transmit Ground <p>Default Baud Rate</p> <p>The default baud rate of the UART ports on the LG290P is 460800bps.</p>"},{"location":"print_view/#radio-transceivers","title":"Radio Transceivers","text":"<p>We have designed the locking JST connector to be plug-n-play with the following devices and cables. However, for the SiK Telemetry Radio v3, users should modify the <code>VSEL</code> jumper (1) on the back of the board to enable a 5V output on the <code>VCC</code> pin. Below, is a table summarizing the pin connections of the radios.</p> <ol> <li>While the SiK Telemetry Radio v3 may function with a 3.3V input, their specifications stipulate that a 5V power supply be provided.</li> </ol> Pin Number      **1**     *(Left Side)*  **2** **3** **4** **5**      **6**     *(Right)*  Label 5V      RX - SiK     RXI - LoRaSerial       TX - SiK     TXO - LoRaSerial  CTS RTS GND Function **Voltage Input**     - SiK: 5V     - LoRaSerial: 3.3 to 5V (1)  UART - Receive UART - Transmit      Flow Control     *Clear-to-Send*       Flow Control     *Ready-to-Send*  Ground Radio Pin Connections <p>As documented in the LoRaSerial product manual, the pin connections between a host system (i.e. RTK Postcard) and the LoRaSerial radio is outlined in the image below.</p> <p>  The pin connections between a radio and the RTK Postcard.  </p> <p>However, the flow control pins (<code>CTS</code> and <code>RTS</code>) are not available on the RTK Postcard. Therefore, when connecting either of the radios, the pin connections should follow the table below:</p> <p> Board RX TX GND Radio TX RX GND </p> Radio Transceivers and Cables <p>Default Baud Rate</p> <p>The baud rate for these radios are configured by the <code>SERIAL_SPEED</code> parameter. The default configuration is <code>SERIAL_SPEED</code>: 57600bps.</p> <ul> <li> <p> <p>SiK Telemetry Radio V3 - 915MHz, 100mW WRL-19032</p> <li> <p> <p>SparkFun LoRaSerial Kit - 915MHz (Enclosed) WRL-20029</p> <li> <p> <p>JST-GHR-04V to JST-GHR-06V Cable - 1.25mm pitch CAB-17239</p> <li> <p> <p>GHR-04V-S to GHR-06V-S Cable - 100mm CAB-17854</p>"},{"location":"print_view/#breakout-pins","title":"Breakout Pins","text":"<p>The PTH pins on the Quad-band GNSS RTK board are broken out into 0.1\"-spaced pins on the outer edges of the board.</p> New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide.</p> <ul> <li> <p> <p>How to Solder: Through-Hole Soldering</p> <ul> <li> <p>Headers</p> <p>When selecting headers, be sure you are aware of the functionality you require.</p> <p>  Soldering headers to the RTK Postcard.  </p> </li> <li> <p>Hookup Wires</p> <p>For a more permanent connection, users can solder wires directly to the board.</p> <p>  Soldering wires to the RTK Postcard.  </p> </li> </ul>"},{"location":"print_view/#software-overview","title":"Software Overview","text":""},{"location":"print_view/#ch342-usb-driver","title":"CH342 USB Driver","text":"<p>The USB drivers for the CH342 USB-to-Serial converter can be downloaded from the manufacturer's website.</p> <ul> <li> <p> Windows</p> <p> Download Page for <code>CH343SER.EXE</code></p> </li> <li> <p> MacOS</p> <p> Download Page for <code>CH341SER_MAC.ZIP</code></p> </li> </ul> <p>Linux</p> <p>A USB driver is not required for Linux based operating systems.</p>"},{"location":"print_view/#rtk-everywhere-firmware","title":"RTK Everywhere Firmware","text":"<p>The RTK Postcard comes preloaded with our latest RTK Everywhere firmware. Our firmware is completely open-source; therefore, users can view the code to troubleshoot issues, contribute new features or updates, and file issues for any bugs they discover. In addition, we also users with pre-compiled binaries in our SparkFun RTK Everywhere Firmware binaries GitHub repository and a RTK Firmware Uploader tool to upload the pre-compiled binaries to the RTK Postcard. For more information, users can reference the user manual for the RTK Everywhere firmware and associated links below:</p> <ul> <li>Compile the firmware</li> <li>Update the firmware</li> <li>RTK Firmware Uploader</li> </ul> <p><code>RTK_Everywhere_Firmware_RC-XXX_XX_XXXX.bin</code> <code>RTK_Everywhere_Firmware_RC-*.bin</code></p>"},{"location":"print_view/#arduino-ide","title":"Arduino IDE","text":"<p>Most users may already be familiar with the Arduino IDE and its use. However, for those of you who have never heard the name Arduino before, feel free to check out the Arduino website. In order to program the RTK Postcard, users will need to install the ESP32 Arduino Core through the Board Manager. Additionally, we also recommend installing the SparkFun LG290P Quadband RTK GNSS Arduino Library to interface with the LG290P GNSS receiver.</p>"},{"location":"print_view/#espressif-esp32-arduino-core","title":"Espressif ESP32 Arduino Core","text":"<p>The ESP32 Arduino Core can be installed from the board manager in the Arduino IDE by searching for:</p> <pre><code>esp32 by Espressif Systems\n</code></pre> <p></p> <p>Preference settings for the Arduino IDE.</p> <p></p> <p>The Espressif ESP32 Arduino core in the library manager of the Arduino IDE.</p> <p>Arduino Board Manager URL</p> <p>In order to install Espressif's ESP32 Arduino core, users must provide the Arduino Board Manager URL in the preferences settings (File &gt; Preferences) for the Arduino IDE:</p> <pre><code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n</code></pre>"},{"location":"print_view/#board-selection","title":"Board Selection","text":"<p>In order to program the ESP32 Pico-Mini module on the RTK Postcard, users should select the ESP32 Dev Module from the Tools &gt; Board: &gt; esp32 drop-down menu.</p> <p></p> <p>Selecting the ESP32 Dev Module board for the RTK Postcard in the Arduino IDE.</p>"},{"location":"print_view/#sparkfun-lg290p-quadband-rtk-gnss-arduino-library","title":"SparkFun LG290P Quadband RTK GNSS Arduino Library","text":"<p>The SparkFun LG290P Quadband RTK GNSS Arduino Library can be installed from the library manager in the Arduino IDE by searching for:</p> <pre><code>SparkFun LG290P Quadband RTK GNSS Arduino Library\n</code></pre> <p></p> <p>SparkFun LG290P Quadband RTK GNSS Arduino Library in the library manager of the Arduino IDE.</p> <p>Manually Download the Arduino Library</p> <p>For users who would like to manually download and install the library, the <code>*.zip</code> file can be accessed from the GitHub repository or downloaded by clicking the button below.</p> <p>  Download the Arduino Library </p>"},{"location":"print_view/#gnss-software","title":"GNSS Software","text":"<p>Tip</p> <p>To manually interface with the LG290P GNSS module, users can utilize the QGNSS software provided by Quectel. This method is recommended due to the unique data structure of the UART command messages, utilized to configure the LG290P module.</p> Windows Only <p>Currently, the QGNSS software is only available for Windows operating systems.</p> Windows, MacOS, or Linux <p>For users with computers that run on MacOS or Linux, we have found alternative software option for viewing the data from the NMEA messages. However, this GUI interface is currently limited to only receiving UART messages and cannot send messages to configure the LG290P module.</p> <ul> <li> GitHub Repository</li> <li>Installation Instructions</li> <li>PyPI Project</li> </ul>"},{"location":"print_view/#qgnss-software","title":"QGNSS Software","text":"<p>QGNSS is highly intuitive GNSS evaluation software that is easy to use, personalized, and compatible with leading Quectel technologies. The software allows users to define or apply GNSS product configurations for specific use cases. Saving, restoring, or sharing configurations between different products and updating the module's firmware are easy. The software supports product evaluation with a choice of views to observe static and dynamic behavior of the connected a Quectel GNSS receiver.</p> <pre><code>[:octicons-download-16:{ .heart } Download the QGNSS Software *(v2.1)* from Quectel](https://www.quectel.com/download/qgnss_v2-1_en/){ .md-button .md-button--primary target=\"blank\" }\n</code></pre> Windows Only <p>Currently, the QGNSS software is only available for Windows operating systems.</p>"},{"location":"print_view/#connecting-to-the-lg290p","title":"Connecting to the LG290P","text":"<p>In order to connect to the LG290P properly, users will need to specify the settings of the UART port.</p> <p></p> <p>Click the  button to configure the UART settings.</p> <p>Before users can connect to the RTK Postcard, they will need to specify the connection settings in QGNSS. Once configured, users can select the OK button and QGNSS will automatically attempt to connect to the GNSS module.</p> <ul> <li>Select the <code>LG290P(03)</code> from the drop-down menu to configure the <code>Model</code> of the GNSS module being connected.</li> <li>Below, is a list of the default settings for <code>UART</code> ports of the LG290P. These settings should be selected in the <code>Device Information</code> menu, unless configured differently.</li> <li>When connecting through the USB-C connector, under the <code>Port</code> option, select the port labeled with channel <code>B</code> from the drop-down menu.</li> </ul> <p></p> <p>From the available <code>COM</code> ports for the CH342, select the port labeled <code>B</code> to access the LG290P GNSS receiver. Users will also need to specify the settings for the UART port.</p> <p>LG290P - Default Settings</p> <p>The UART ports of the LG290P GNSS module will have the following default configuration:</p> <ul> <li>Baudrate: 460800bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul>"},{"location":"print_view/#configure-the-lg290p","title":"Configure the LG290P","text":"<p>By default, the UART ports are configured to transmit and receive <code>NMEA 0183</code> and/or <code>RTCM 3.x</code> messages. These messages are generally used for transmitting PNT data; and providing or receiving RTK corrections, respectively. Quectel also implements a system of proprietary messages (<code>PQTM</code>) for users to configure the LG290P, following the data format of the <code>NMEA</code> protocol.</p> Data Format - PQTM Messages <p>The expected structure of the data in the proprietary PQTM messages is shown below:</p> <p>  The data structure of Quectel messages for the <code>NMEA</code> protocol.  </p> <p><code>&lt;Checksum&gt;</code>:</p> <ul> <li>Checksum field follows the checksum delimiter character <code>*</code>.</li> <li>Checksum is the 8-bit exclusive OR of all characters in the sentence, including <code>,</code> the field delimiter, between but not including the <code>$</code> and the <code>*</code> delimiters.</li> </ul> <p><code>&lt;CR&gt;</code> &amp; <code>&lt;LF&gt;</code>: Carriage return; followed by a new line</p> <ul> <li>Depending on the terminal emulator, these may be options configured in the program settings.</li> <li>Otherwise, users may need to add the <code>\\r</code> and <code>\\n</code> characters at the end of the message.</li> </ul> <p>In the QGNSS software, users can click on the Advance button, at the bottom of the <code>QConsole</code> window, to configure the settings for the messages sent to the LG290P. Selecting <code>NMEA</code> and <code>CRLF</code> from the drop-down menu of the Checksum Type and Suffix options, will automatically calculate and append the <code>&lt;checksum&gt;</code> value, carriage return, and line follow to the end of the message entered in the Data Input field.</p> <p></p> <p>The settings for the messages transmitted from the QConsole.</p> Display the QConsole Toolbar <p>There is a toolbar for the QConsole, which has a bunch of tools that users may find useful. This includes, a search function, scroll-lock button, pause/clear the message feed, etc. To open/close the toolbar inside the QConsole, right-click on the mouse and select the <code>Show Tool</code> option from the drop-down menu or utilize the keyboard shortcut: Ctrl + Q.</p> <p> Right-click on the mouse and select the <code>Show Tool</code> option, inside the QConsole.  </p> Example - <code>PQTMCFGUART</code> Message <p>As an example, try utilizing the <code>PQTMCFGUART</code> PQTM message. Enter <code>$PQTMCFGUART,R*</code> into the Data Input* field of the QConsole. DOn't forget to select the <code>NMEA</code> and <code>CRLF</code> options from Advance settings menu. If entered and configured properly, the value <code>36</code> should pop up in the Checksum field of the QConsole; then, click on the  button to send the message.</p> <pre><code>$PQTMCFGUART,R*\n</code></pre> <p>Once the message has been sent, keep a close watch of the messages in the console. It may help to click on the  button to disable auto-scrolling, when trying to locate the message response. Additionally, the response may not appear right away, it could be appended to the end of the next data packet, as shown in the image below.</p> <p>  Example of utilizing the Quectel PQTM messages in the QConsole.  </p>"},{"location":"print_view/#pygpsclient","title":"PyGPSClient","text":"<p>Software Limitations</p> <p>With this software, users will only be able to view the data from the NMEA messages and connect to an NTRIP caster. Users will not be able to configure the LG290P module with the built-in console.</p> <p>As an alternative to QGNSS, for users with computers that run on MacOS or Linux, we recommend PyGPSClient as an option for viewing the data from the NMEA messages and connecting to an NTRIP caster. However, users should be aware that this GUI interface is currently limited to only receiving UART messages and cannot send messages to configure the LG290P module.</p> Resources <p>For additional information, users can refer to the following resources for the PyGPSClient software:</p> <ul> <li> GitHub Repository</li> <li>Installation Instructions</li> <li>PyPI Project</li> </ul>"},{"location":"print_view/#installation","title":"Installation","text":"<p>There are a variety of installation methods detailed in the GitHub repository's <code>README.md</code> file. However, we recommend utilizing the <code>pip</code> installation method.</p> <p>Installation Commands</p> <p>Depending on how Python is installed on the computer, one of the following commands should allow users to install the software.</p> <ul> <li> <pre><code>python3 -m pip install pygpsclient\n</code></pre> </li> <li> <pre><code>pip install pygpsclient\n</code></pre> </li> </ul> <p>System Requirements</p> <p>This installation method requires an internet connection. Additionally, users will also need administrative privileges (or root access <code>sudo</code>) for the installation.</p>"},{"location":"print_view/#connecting-to-the-lg290p_1","title":"Connecting to the LG290P","text":"<p>Before users can connect to the RTK Postcard, they will need to specify the settings of the UART port in PyGPSClient. Once configured, users can select the  button and PyGPSClient will automatically attempt to connect to the GNSS module.</p> <ul> <li>Below, is a list of the default settings for <code>UART</code> ports of the LG290P. These settings should be selected in the configuration menu.</li> <li>For the <code>Serial Port</code>, select the port labeled with channel <code>B</code> from the drop-down menu.</li> </ul> <p></p> <p>Specify the settings for the UART port in QGNSS.</p> <p>LG290P - Default Settings</p> <p>The UART ports of the LG290P GNSS module will have the following default configuration:</p> <ul> <li>Baudrate: 460800bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul>"},{"location":"print_view/#terminal-emulator","title":"Terminal Emulator","text":"<p>Another viable option for connecting to the RTK Postcard, is to utilize a terminal emulation program. While reading the data sent from the LG290P is relatively trivial, users will need to be more selective when choosing an emulator to configure the LG290P module on the RTK Postcard. This is due to the unique data structure of the proprietary messages that Quectel implements to configure the LG290P (see the Configure the LG290P section, above).</p>"},{"location":"print_view/#resources","title":"Resources","text":""},{"location":"print_view/#product-resources","title":"Product Resources","text":"<ul> <li> <ul> <li> Product Page</li> <li> Design Files:<ul> <li> Schematic</li> <li> Board Dimensions</li> <li> KiCad Files</li> <li> STEP File</li> </ul> </li> <li> Software:<ul> <li> RTK Everywhere Firmware<ul> <li> User Manual</li> <li> Firmware Binary Files</li> <li> Firmware Uploader Tool</li> </ul> </li> <li> CH342 USB Driver (manufacturer website)<ul> <li> Windows</li> <li> MacOS</li> </ul> </li> <li> QGNSS Software (v2.0)</li> <li> ESP32 Arduino Core<ul> <li>Arduino Board Manager URL:      <pre><code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n</code></pre></li> </ul> </li> </ul> </li> <li> SFE Product Showcase</li> </ul> </li> <li> <ul> <li> Component Documentation:<ul> <li>Espressif logo ESP32 Pico-Mini-02:<ul> <li> ESP32-Pico-Mini-02 Module Datasheet<ul> <li> ESP32-Pico SoC Series Datasheet</li> <li> ESP32 Microcontroller Datasheet</li> </ul> </li> </ul> </li> <li>Quectel logo LG290P:<ul> <li> Product Specifications</li> <li> Protocol Specification</li> <li> RTK Application Note</li> <li> Hardware Design</li> <li> Firmware Upgrade Guide</li> </ul> </li> <li> CH342 Datasheet</li> <li> RT9080 Datasheet</li> <li> JST-GH Connector Specifications</li> <li> JST-SH Connector Specifications (Qwiic Connector)</li> </ul> </li> <li> GitHub Repositories:<ul> <li> Hardware Repository</li> <li> RTK Everywhere Firmware</li> <li> RTK Everywhere Firmware Binaries</li> <li> RTK Firmware Uploader</li> <li> ESP32 Arduino Core</li> </ul> </li> </ul> </li> </ul>"},{"location":"print_view/#additional-resources","title":"Additional Resources","text":"<ul> <li> Qwiic Information Page</li> <li> SparkFun Technical Assistance</li> </ul>"},{"location":"print_view/#manufacturers-resources","title":"\ud83c\udfed\u00a0Manufacturer's Resources","text":""},{"location":"print_view/#espressif-primary-logo","title":"Espressif primary logo","text":"<p>Espressif also provides great resources for the ESP32 Pico-Mini module:</p> <ul> <li> Product Webpage</li> <li> Espressif ESP32 Forum</li> <li> Technical Inquiries</li> <li> Technical Documents</li> <li> Resources</li> </ul>"},{"location":"print_view/#quectel-primary-logo","title":"Quectel primary logo","text":"<p>Quectel also provides great resources for the LG290P GNSS module:</p> <ul> <li> Product Webpage</li> <li> Quectel Forum</li> <li> Technical Support</li> <li> Download Zone</li> <li> Resource Library</li> </ul>"},{"location":"print_view/#pqmt-commands","title":"PQMT Commands","text":"<p>Below, are excerpts for a few of the PQTM messages from the GNSS Protocol Specification manual. Users will find these useful for configuring their LG290P GNSS module as an RTK base station or rover.</p> Documentation <p>A full list of PQTM messages (proprietary NMEA messages defined by Quectel) supported by LG290P, is provided in section 2.3. PQTM Messages of the GNSS Protocol Specification manual. This protocol is used to configure or read the settings for the LG290P GNSS module.</p> List of Proprietary Quectel Messages Message Type Mode Message Description PQTMVER Output Outputs the firmware version PQTMCOLD Input Performs a cold start PQTMWARM Input Performs a warm start PQTMHOT Input Performs a hot start PQTMSRR Input Performs a system reset and reboots the receiver PQTMUNIQID Output Queries the module unique ID PQTMSAVEPAR Input Saves the configurations into NVM PQTMRESTOREPAR Input Restores the parameters configured by all commands to their default values PQTMVERNO Output Queries the firmware version PQTMCFGUART Input/Output Sets/gets the UART interface PQTMCFGPPS Input/Output Sets/gets the PPS feature PQTMCFGPROT Input/Output Sets/gets the input and output protocol for a specified port PQTMCFGNMEADP Input/Output Sets/gets the decimal places of standard NMEA messages PQTMEPE Output Outputs the estimated position error PQTMCFGMSGRATE Input/Output Sets/gets the message output rate on the current interface PQTMVEL Output Outputs the velocity information PQTMCFGGEOFENCE Input/Output Sets/gets geofence feature PQTMGEOFENCESTATUS Output Outputs the geofence status PQTMGNSSSTART Input Starts GNSS engine PQTMGNSSSTOP Input Stops GNSS engine PQTMTXT Output Outputs short text messages PQTMCFGSVIN Input/Output Sets/gets the Survey-in feature PQTMSVINSTATUS Output Outputs the Survey-in status PQTMPVT Output Outputs the PVT (GNSS only) result PQTMCFGRCVRMODE Input/Output Sets/gets the receiver working mode PQTMDEBUGON Input Enables debug log output PQTMDEBUGOFF Input Disables debug log output PQTMCFGFIXRATE Input/Output Sets/gets the fix interval PQTMCFGRTK Input/Output Sets/gets the RTK mode PQTMCFGCNST Input/Output Sets/gets the constellation configuration PQTMDOP Output Outputs dilution of precision PQTMPL Output Outputs protection level information PQTMCFGODO Input/Output Sets/gets the odometer feature PQTMRESETODO Input Resets the accumulated distance recorded by the odometer PQTMODO Output Outputs the odometer information PQTMCFGSIGNAL Input/Output Sets/gets GNSS signal mask PQTMCFGSAT Input/Output Sets/gets GNSS satellite mask PQTMCFGRSID Input/Output Sets/gets the reference station ID PQTMCFGRTCM Input/Output Sets/gets RTCM"},{"location":"print_view/#save-parametersrestore-to-default-settings","title":"Save Parameters/Restore to Default Settings","text":""},{"location":"print_view/#pqtmsavepar","title":"<code>PQTMSAVEPAR</code>","text":"<p>Saves the current configurations into NVM of the LG290P</p> <pre><code>$PQTMSAVEPAR*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;\n</code></pre> Example <p>Save the current settings to non-volatile memory of the LG290P. <pre><code>$PQTMSAVEPAR*5A\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMSAVEPAR,OK*72\n</code></pre></p>"},{"location":"print_view/#pqtmrestorepar","title":"<code>PQTMRESTOREPAR</code>","text":"<p>Restores the parameters configured by all commands to their default values; this command takes effect after restarting the LG290P</p> <pre><code>$PQTMRESTOREPAR*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;  \n</code></pre> Example <p>Restore all the settings of the LG290P to their factory defaults  <pre><code>$PQTMRESTOREPAR*13\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMRESTOREPAR,OK*3B\n</code></pre></p>"},{"location":"print_view/#uart-settings","title":"UART Settings","text":""},{"location":"print_view/#pqtmcfguart","title":"<code>PQTMCFGUART</code>","text":"<p>Configures the serial protocol setting for the UART interfaces</p> <ul> <li> <p>Current UART interface:</p> <pre><code>$PQTMCFGUART,W,&lt;BaudRate&gt;[,&lt;DataBit&gt;,&lt;Parity&gt;,&lt;StopBit&gt;,&lt;FlowCtrl&gt;]*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;\n</code></pre> </li> <li> <p>A specific UART interface:</p> <pre><code>$PQTMCFGUART,W,&lt;Index&gt;,&lt;BaudRate&gt;[,&lt;DataBit&gt;,&lt;Parity&gt;,&lt;StopBit&gt;,&lt;FlowCtrl&gt;]*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;\n</code></pre> </li> </ul> <p>Parameters:</p> <p> Field <code>&lt;Index&gt;</code> <code>&lt;BaudRate&gt;</code> <code>&lt;DataBit&gt;</code> <code>&lt;Parity&gt;</code> <code>&lt;StopBit&gt;</code> <code>&lt;FlowCtrl&gt;</code> Description UART Interface <ul> <li><code>1</code> = UART1</li> <li><code>2</code> = UART2</li> <li><code>3</code> = UART3</li> </ul> Baud Rate (bps) <ul> <li><code>9600</code></li> <li><code>115200</code></li> <li><code>230400</code></li> <li><code>460800</code></li> <li><code>921600</code></li> </ul> Number of Data Bits <ul> <li><code>8</code> = 8 bits</li> </ul> Parity <ul> <li><code>0</code> = No parity</li> <li><code>1</code> = Odd parity</li> <li><code>2</code> = Even parity</li> <li><code>3</code> = Mark</li> <li><code>4</code> = Space</li> </ul> Number of Stop Bit(s) <ul> <li><code>1</code> = 1 stop bit</li> <li><code>2</code> = 2 stop bits</li> </ul> Flow Control <ul> <li><code>0</code> = None</li> </ul> </p> Baud Rate <p>For ports utilized in conjunction with either the BlueSMiRF or radio transceivers, we recommend reducing the baud rate to 115200bps or lower to avoid overflowing the buffers of the transceiver's serial port.</p> Configure the Settings <p>Example Settings</p> <ul> <li>Port: <code>UART1</code></li> <li>Baud Rate: 115200bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul> <p>Configure the baud rate of the current UART interface to 115200bps: <pre><code>$PQTMCFGUART,W,115200*18\n</code></pre></p> <p>Configure the baud rate of <code>UART1</code> to 115200bps: <pre><code>$PQTMCFGUART,W,1,115200*05\n</code></pre></p> <p>Configure all parameters of the current UART interface: <pre><code>$PQTMCFGUART,W,115200,8,0,1,0*11\n</code></pre></p> <p>Configure all parameters of <code>UART1</code>: <pre><code>$PQTMCFGUART,W,1,115200,8,0,1,0*0C\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGUART,OK*60\n</code></pre></p> Retrieve the Settings <p>Example Settings</p> <ul> <li>Port: <code>UART1</code></li> <li>Baud Rate: 115200bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul> <p>Get the configuration on the current UART interface: <pre><code>$PQTMCFGUART,R*36\n</code></pre></p> <p>Get the configuration on UART1: <pre><code>$PQTMCFGUART,R,1*2B\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGUART,OK,1,115200,8,0,1,0*5F\n</code></pre></p>"},{"location":"print_view/#pqtmcfgprot","title":"<code>PQTMCFGPROT</code>","text":"<p>Configures the input/output protocol on a specified port</p> <pre><code>$PQTMCFGPROT,W,&lt;PortType&gt;,&lt;PortID&gt;,&lt;InputProt&gt;,&lt;OutputProt&gt;*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;\n</code></pre> <p>Parameters:</p> <p> Field <code>&lt;PortType&gt;</code> <code>&lt;PortID&gt;</code> <code>&lt;InputProt&gt;</code> <code>&lt;OutputProt&gt;</code> Description Port Type <ul> <li><code>1</code> = UART</li> </ul> Port ID <ul> <li><code>1</code> = UART1</li> <li><code>2</code> = UART2</li> <li><code>3</code> = UART3</li> </ul> Input/Output Protocols (<code>HEX</code>: 32-bit) <ul> <li>Bit <code>0</code> = NMEA</li> <li>Bit <code>2</code> = RTCM3</li> </ul> The default protocols are NMEA and RTCM3: HEX: <code>00000005</code> BIN: <code>0000 0000 0000 0000 0000 0000 0000 0101</code> </p> Configure the Settings <p>Example Settings</p> <ul> <li>Port: <code>UART1</code></li> <li>Input Protocol: NMEA &amp; RTCM3</li> <li>Input Protocol: NMEA &amp; RTCM3</li> </ul> <p>Configure the configuration on UART1: <pre><code>$PQTMCFGPROT,W,1,1,00000005,00000005*38\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGPROT,OK*6B\n</code></pre></p> Retrieve the Settings <p>Example Settings</p> <ul> <li>Port: <code>UART1</code></li> <li>Input Protocol: NMEA &amp; RTCM3</li> <li>Input Protocol: NMEA &amp; RTCM3</li> </ul> <p>Get the configuration on UART1: <pre><code>$PQTMCFGPROT,R,1,1*3D\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGPROT,OK,1,1,00000005,00000005*6B\n</code></pre></p>"},{"location":"print_view/#rtk-settings","title":"RTK Settings","text":""},{"location":"print_view/#pqtmcfgsvin","title":"<code>PQTMCFGSVIN</code>","text":"<p>Configures a base station's position either by survey-in mode or fixed mode</p> <pre><code>$PQTMCFGSVIN,W,&lt;Mode&gt;,&lt;CFG_CNT&gt;,&lt;3D_AccLimit&gt;,&lt;ECEF_X&gt;,&lt;ECEF_Y&gt;,&lt;ECEF_Z&gt;*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;\n</code></pre> <p>Parameters:</p> <p> Field <code>&lt;Mode&gt;</code> <code>&lt;CFG_CNT&gt;</code> <code>&lt;3D_AccLimit&gt;</code> <code>&lt;ECEF_X&gt;</code> <code>&lt;ECEF_Y&gt;</code> <code>&lt;ECEF_Z&gt;</code> Description Receiver Mode <ul> <li><code>0</code> = Disable</li> <li><code>1</code> = Survey-in mode</li> <li><code>2</code> = Fixed mode(Position is configured in ECEF coordinates)</li> </ul> Survey-in Mode Minimum positioning time (seconds) <ul> <li>Range: <code>0</code>-<code>86400</code></li> <li>Default: <code>0</code></li> </ul> Survey-in Mode 3D positioning accuracy (meters) <ul> <li><code>0</code> = No limit</li> <li>Default: <code>0.0</code></li> </ul> Fixed Mode WGS84 ECEF X,Y,Z coordinates (meters) <ul> <li>Default: <code>0.0000</code></li> </ul> </p> RTK Base Station Modes <p>In order to operate as a base station, the LG290P GNSS module requires an accurate position of its antenna. This can be either defined in ECEF coordinates or acquired through a self-survey process.</p> <ol> <li>Survey-In Mode: The base station's location is established based on a weighted mean of recent solutions of its position. The <code>&lt;CFG_CNT&gt;</code> and <code>&lt;3D_AccLimit&gt;</code> parameters define the shortest amount of time that the position gets surveyed and the maximum standard deviation of the estimated position.</li> <li>Fixed Mode: The base station's position is provided in ECEF coordinates.</li> </ol> <p>Note</p> <p>Any error in the base station's location will translate directly into an error in the rover's position.</p> Configure the Settings <p>Example Settings</p> <ul> <li>Mode: Survey-in mode</li> <li>Survey Time: 3600 seconds</li> <li>3D Accuracy: 1.2m</li> <li>ECEF Coordinates:<ul> <li>X: -2519265.0514m</li> <li>Y: 4849534.9045m</li> <li>Z: 3277834.6432m</li> </ul> </li> </ul> <p>Configure the configuration on UART1: <pre><code>$PQTMCFGSVIN,W,1,3600,1.2,-2519265.0514,4849534.9045,3277834.6432*01\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGSVIN,OK*70\n</code></pre></p> Retrieve the Settings <p>Example Settings</p> <ul> <li>Mode: Survey-in mode</li> <li>Survey Time: 3600 seconds</li> <li>3D Accuracy: 1.2m</li> <li>ECEF Coordinates:<ul> <li>X: -2519265.0514m</li> <li>Y: 4849534.9045m</li> <li>Z: 3277834.6432m</li> </ul> </li> </ul> <p>Get the configuration on UART1: <pre><code>$PQTMCFGSVIN,R*26\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGSVIN,OK,1,3600,1.2,-2519265.0514,4849534.9045,3277834.6432*52\n</code></pre></p>"},{"location":"print_view/#pqtmcfgrcvrmode","title":"<code>PQTMCFGRCVRMODE</code>","text":"<p>Configures the mode that the receiver is operating in</p> <pre><code>$PQTMCFGRCVRMODE,W,&lt;Mode&gt;*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;\n</code></pre> <p>Parameters:</p> <p> Field <code>&lt;Mode&gt;</code> Description Operation mode <ul> <li><code>0</code> = Unknown</li> <li> <code>1</code> = Rover When set to this mode, the receiver will restore to default NMEA message output state. </li> <li><code>2</code> = Base Station When set to this mode, the receiver will automatically disable NMEA message output and enable RTCM <code>MSM4</code> and RTCMv3 <code>1005</code> message output. </li> </ul> </p> <p>Note</p> <p>After switching the module\u2018s working mode, save the configuration and then reset the module. Otherwise, it will continue to operate in the original mode.</p> Configure the Settings <p>Example Settings</p> <ul> <li>Port ID: <code>UART1</code></li> <li>Input Protocol: NMEA &amp; RTCM3</li> <li>Input Protocol: NMEA &amp; RTCM3</li> </ul> <p>Configure the configuration on UART1: <pre><code>$PQTMCFGRCVRMODE,W,2*29\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGRCVRMODE,OK*64\n</code></pre></p> Retrieve the Settings <p>Example Settings</p> <ul> <li>Port ID: <code>UART1</code></li> <li>Input Protocol: NMEA &amp; RTCM3</li> <li>Input Protocol: NMEA &amp; RTCM3</li> </ul> <p>Get the configuration on UART1: <pre><code>$PQTMCFGRCVRMODE,R*32\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGRCVRMODE,OK,2*7A\n</code></pre></p>"},{"location":"print_view/#pqtmcfgrtk","title":"<code>PQTMCFGRTK</code>","text":"<p>Configures the operation settings of the RTK mode</p> <pre><code>$PQTMCFGRTK,W,&lt;DiffMode&gt;,&lt;RelMode&gt;*&lt;Checksum&gt;&lt;CR&gt;&lt;LF&gt;\n</code></pre> <p>Parameters:</p> <p> Field <code>&lt;DiffMode&gt;</code> <code>&lt;RelMode&gt;</code> Description Differential Mode <ul> <li><code>0</code> = Disable RTK/RTD feature (Differential data is not used)</li> <li><code>1</code> = Auto mode</li> <li><code>2</code> = RTD only mode (Only pseudoranges is used)</li> </ul> Absolute/Relative Mode <ul> <li><code>1</code> = Absolute mode, ensure absolute position accuracy</li> <li><code>2</code> = Relative mode, ensure relative position accuracy</li> </ul> This field only takes effect when <code>&lt;DiffMode&gt;</code> = <code>1</code> and the module enters the RTK only mode.  </p> Configure the Settings <p>Example Settings</p> <ul> <li>Port ID: <code>UART1</code></li> <li>Input Protocol: NMEA &amp; RTCM3</li> <li>Input Protocol: NMEA &amp; RTCM3</li> </ul> <p>Configure the configuration on UART1: <pre><code>$PQTMCFGRTK,W,1,1*6C\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGRTK,OK*3F\n</code></pre></p> Retrieve the Settings <p>Example Settings</p> <ul> <li>Port ID: <code>UART1</code></li> <li>Input Protocol: NMEA &amp; RTCM3</li> <li>Input Protocol: NMEA &amp; RTCM3</li> </ul> <p>Get the configuration on UART1: <pre><code>$PQTMCFGRTK,R*69\n</code></pre></p> <p>If there are no errors, users will receive the following response: <pre><code>$PQTMCFGRTK,OK,1,1*3F\n</code></pre></p>"},{"location":"print_view/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun GNSS Forum is a great place to ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p>  ![QR code to the hookup guide](./assets/img/qr_code/hookup_guide.png){ .qr }  <ol> <li> <p>Feature Under Development</p> <p>Currently, only the UART interface is supported by the module. Support for the I<sup>2</sup>C and SPI interfaces are still under development.</p> <p>\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Feature Under Development</p> <p>Support for the <code>L1C</code> frequency band has not been implemented.</p> <p>\u21a9\u21a9\u21a9</p> </li> <li> <p>Feature Under Development</p> <p>Corrections for some of the PPP services have not been implemented.</p> <p>\u21a9</p> </li> <li> <p>Feature Under Development</p> <p>The event trigger has not been implemented.</p> <p>\u21a9\u21a9</p> </li> </ol>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#product-resources","title":"Product Resources","text":"<ul> <li> <ul> <li> Product Page</li> <li> Design Files:<ul> <li> Schematic</li> <li> Board Dimensions</li> <li> KiCad Files</li> <li> STEP File</li> </ul> </li> <li> Software:<ul> <li> RTK Everywhere Firmware<ul> <li> User Manual</li> <li> Firmware Binary Files</li> <li> Firmware Uploader Tool</li> </ul> </li> <li> CH342 USB Driver (manufacturer website)<ul> <li> Windows</li> <li> MacOS</li> </ul> </li> <li> QGNSS Software (v2.0)</li> <li> ESP32 Arduino Core<ul> <li>Arduino Board Manager URL:      <pre><code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n</code></pre></li> </ul> </li> </ul> </li> <li> SFE Product Showcase</li> </ul> </li> <li> <ul> <li> Component Documentation:<ul> <li>Espressif logo ESP32 Pico-Mini-02:<ul> <li> ESP32-Pico-Mini-02 Module Datasheet<ul> <li> ESP32-Pico SoC Series Datasheet</li> <li> ESP32 Microcontroller Datasheet</li> </ul> </li> </ul> </li> <li>Quectel logo LG290P:<ul> <li> Product Specifications</li> <li> Protocol Specification</li> <li> RTK Application Note</li> <li> Hardware Design</li> <li> Firmware Upgrade Guide</li> </ul> </li> <li> CH342 Datasheet</li> <li> RT9080 Datasheet</li> <li> JST-GH Connector Specifications</li> <li> JST-SH Connector Specifications (Qwiic Connector)</li> </ul> </li> <li> GitHub Repositories:<ul> <li> Hardware Repository</li> <li> RTK Everywhere Firmware</li> <li> RTK Everywhere Firmware Binaries</li> <li> RTK Firmware Uploader</li> <li> ESP32 Arduino Core</li> </ul> </li> </ul> </li> </ul>"},{"location":"resources/#additional-resources","title":"Additional Resources","text":"<ul> <li> Qwiic Information Page</li> <li> SparkFun Technical Assistance</li> </ul>"},{"location":"resources/#manufacturers-resources","title":"\ud83c\udfed\u00a0Manufacturer's Resources","text":""},{"location":"resources/#espressif-primary-logo","title":"Espressif primary logo","text":"<p>Espressif also provides great resources for the ESP32 Pico-Mini module:</p> <ul> <li> Product Webpage</li> <li> Espressif ESP32 Forum</li> <li> Technical Inquiries</li> <li> Technical Documents</li> <li> Resources</li> </ul>"},{"location":"resources/#quectel-primary-logo","title":"Quectel primary logo","text":"<p>Quectel also provides great resources for the LG290P GNSS module:</p> <ul> <li> Product Webpage</li> <li> Quectel Forum</li> <li> Technical Support</li> <li> Download Zone</li> <li> Resource Library</li> </ul>"},{"location":"software-esp32/","title":"Program the ESP32","text":""},{"location":"software-esp32/#ch342-usb-driver","title":"CH342 USB Driver","text":"<p>The USB drivers for the CH342 USB-to-Serial converter can be downloaded from the manufacturer's website.</p> <ul> <li> <p> Windows</p> <p> Download Page for <code>CH343SER.EXE</code></p> </li> <li> <p> MacOS</p> <p> Download Page for <code>CH341SER_MAC.ZIP</code></p> </li> </ul> <p>Linux</p> <p>A USB driver is not required for Linux based operating systems.</p>"},{"location":"software-esp32/#rtk-everywhere-firmware","title":"RTK Everywhere Firmware","text":"<p>The RTK Postcard comes preloaded with our latest RTK Everywhere firmware. Our firmware is completely open-source; therefore, users can view the code to troubleshoot issues, contribute new features or updates, and file issues for any bugs they discover. In addition, we also users with pre-compiled binaries in our SparkFun RTK Everywhere Firmware binaries GitHub repository and a RTK Firmware Uploader tool to upload the pre-compiled binaries to the RTK Postcard. For more information, users can reference the user manual for the RTK Everywhere firmware and associated links below:</p> <ul> <li>Compile the firmware</li> <li>Update the firmware</li> <li>RTK Firmware Uploader</li> </ul> <p><code>RTK_Everywhere_Firmware_RC-XXX_XX_XXXX.bin</code> <code>RTK_Everywhere_Firmware_RC-*.bin</code></p>"},{"location":"software-esp32/#arduino-ide","title":"Arduino IDE","text":"<p>Most users may already be familiar with the Arduino IDE and its use. However, for those of you who have never heard the name Arduino before, feel free to check out the Arduino website. In order to program the RTK Postcard, users will need to install the ESP32 Arduino Core through the Board Manager. Additionally, we also recommend installing the SparkFun LG290P Quadband RTK GNSS Arduino Library to interface with the LG290P GNSS receiver.</p>"},{"location":"software-esp32/#espressif-esp32-arduino-core","title":"Espressif ESP32 Arduino Core","text":"<p>The ESP32 Arduino Core can be installed from the board manager in the Arduino IDE by searching for:</p> <pre><code>esp32 by Espressif Systems\n</code></pre> <p></p> <p>Preference settings for the Arduino IDE.</p> <p></p> <p>The Espressif ESP32 Arduino core in the library manager of the Arduino IDE.</p> <p>Arduino Board Manager URL</p> <p>In order to install Espressif's ESP32 Arduino core, users must provide the Arduino Board Manager URL in the preferences settings (File &gt; Preferences) for the Arduino IDE:</p> <pre><code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n</code></pre>"},{"location":"software-esp32/#board-selection","title":"Board Selection","text":"<p>In order to program the ESP32 Pico-Mini module on the RTK Postcard, users should select the ESP32 Dev Module from the Tools &gt; Board: &gt; esp32 drop-down menu.</p> <p></p> <p>Selecting the ESP32 Dev Module board for the RTK Postcard in the Arduino IDE.</p>"},{"location":"software-esp32/#sparkfun-lg290p-quadband-rtk-gnss-arduino-library","title":"SparkFun LG290P Quadband RTK GNSS Arduino Library","text":"<p>The SparkFun LG290P Quadband RTK GNSS Arduino Library can be installed from the library manager in the Arduino IDE by searching for:</p> <pre><code>SparkFun LG290P Quadband RTK GNSS Arduino Library\n</code></pre> <p></p> <p>SparkFun LG290P Quadband RTK GNSS Arduino Library in the library manager of the Arduino IDE.</p> <p>Manually Download the Arduino Library</p> <p>For users who would like to manually download and install the library, the <code>*.zip</code> file can be accessed from the GitHub repository or downloaded by clicking the button below.</p> <p>  Download the Arduino Library </p>"},{"location":"software-lg290p/","title":"Interface w/ LG290P","text":""},{"location":"software-lg290p/#ch342-usb-driver","title":"CH342 USB Driver","text":"<p>The USB drivers for the CH342 USB-to-Serial converter can be downloaded from the manufacturer's website.</p> <ul> <li> <p> Windows</p> <p> Download Page for <code>CH343SER.EXE</code></p> </li> <li> <p> MacOS</p> <p> Download Page for <code>CH341SER_MAC.ZIP</code></p> </li> </ul> <p>Linux</p> <p>A USB driver is not required for Linux based operating systems.</p>"},{"location":"software-lg290p/#gnss-software","title":"GNSS Software","text":"<p>Tip</p> <p>To manually interface with the LG290P GNSS module, users can utilize the QGNSS software provided by Quectel. This method is recommended due to the unique data structure of the UART command messages, utilized to configure the LG290P module.</p> Windows Only <p>Currently, the QGNSS software is only available for Windows operating systems.</p> Windows, MacOS, or Linux <p>For users with computers that run on MacOS or Linux, we have found alternative software option for viewing the data from the NMEA messages. However, this GUI interface is currently limited to only receiving UART messages and cannot send messages to configure the LG290P module.</p> <ul> <li> GitHub Repository</li> <li>Installation Instructions</li> <li>PyPI Project</li> </ul>"},{"location":"software-lg290p/#qgnss-software","title":"QGNSS Software","text":"<p>QGNSS is highly intuitive GNSS evaluation software that is easy to use, personalized, and compatible with leading Quectel technologies. The software allows users to define or apply GNSS product configurations for specific use cases. Saving, restoring, or sharing configurations between different products and updating the module's firmware are easy. The software supports product evaluation with a choice of views to observe static and dynamic behavior of the connected a Quectel GNSS receiver.</p> <pre><code>[:octicons-download-16:{ .heart } Download the QGNSS Software *(v2.1)* from Quectel](https://www.quectel.com/download/qgnss_v2-1_en/){ .md-button .md-button--primary target=\"blank\" }\n</code></pre> Windows Only <p>Currently, the QGNSS software is only available for Windows operating systems.</p>"},{"location":"software-lg290p/#connecting-to-the-lg290p","title":"Connecting to the LG290P","text":"<p>In order to connect to the LG290P properly, users will need to specify the settings of the UART port.</p> <p></p> <p>Click the  button to configure the UART settings.</p> <p>Before users can connect to the RTK Postcard, they will need to specify the connection settings in QGNSS. Once configured, users can select the OK button and QGNSS will automatically attempt to connect to the GNSS module.</p> <ul> <li>Select the <code>LG290P(03)</code> from the drop-down menu to configure the <code>Model</code> of the GNSS module being connected.</li> <li>Below, is a list of the default settings for <code>UART</code> ports of the LG290P. These settings should be selected in the <code>Device Information</code> menu, unless configured differently.</li> <li>When connecting through the USB-C connector, under the <code>Port</code> option, select the port labeled with channel <code>B</code> from the drop-down menu.</li> </ul> <p></p> <p>From the available <code>COM</code> ports for the CH342, select the port labeled <code>B</code> to access the LG290P GNSS receiver. Users will also need to specify the settings for the UART port.</p> <p>LG290P - Default Settings</p> <p>The UART ports of the LG290P GNSS module will have the following default configuration:</p> <ul> <li>Baudrate: 460800bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul>"},{"location":"software-lg290p/#configure-the-lg290p","title":"Configure the LG290P","text":"<p>By default, the UART ports are configured to transmit and receive <code>NMEA 0183</code> and/or <code>RTCM 3.x</code> messages. These messages are generally used for transmitting PNT data; and providing or receiving RTK corrections, respectively. Quectel also implements a system of proprietary messages (<code>PQTM</code>) for users to configure the LG290P, following the data format of the <code>NMEA</code> protocol.</p> Data Format - PQTM Messages <p>The expected structure of the data in the proprietary PQTM messages is shown below:</p> <p>  The data structure of Quectel messages for the <code>NMEA</code> protocol.  </p> <p><code>&lt;Checksum&gt;</code>:</p> <ul> <li>Checksum field follows the checksum delimiter character <code>*</code>.</li> <li>Checksum is the 8-bit exclusive OR of all characters in the sentence, including <code>,</code> the field delimiter, between but not including the <code>$</code> and the <code>*</code> delimiters.</li> </ul> <p><code>&lt;CR&gt;</code> &amp; <code>&lt;LF&gt;</code>: Carriage return; followed by a new line</p> <ul> <li>Depending on the terminal emulator, these may be options configured in the program settings.</li> <li>Otherwise, users may need to add the <code>\\r</code> and <code>\\n</code> characters at the end of the message.</li> </ul> <p>In the QGNSS software, users can click on the Advance button, at the bottom of the <code>QConsole</code> window, to configure the settings for the messages sent to the LG290P. Selecting <code>NMEA</code> and <code>CRLF</code> from the drop-down menu of the Checksum Type and Suffix options, will automatically calculate and append the <code>&lt;checksum&gt;</code> value, carriage return, and line follow to the end of the message entered in the Data Input field.</p> <p></p> <p>The settings for the messages transmitted from the QConsole.</p> Display the QConsole Toolbar <p>There is a toolbar for the QConsole, which has a bunch of tools that users may find useful. This includes, a search function, scroll-lock button, pause/clear the message feed, etc. To open/close the toolbar inside the QConsole, right-click on the mouse and select the <code>Show Tool</code> option from the drop-down menu or utilize the keyboard shortcut: Ctrl + Q.</p> <p> Right-click on the mouse and select the <code>Show Tool</code> option, inside the QConsole.  </p> Example - <code>PQTMCFGUART</code> Message <p>As an example, try utilizing the <code>PQTMCFGUART</code> PQTM message. Enter <code>$PQTMCFGUART,R*</code> into the Data Input* field of the QConsole. DOn't forget to select the <code>NMEA</code> and <code>CRLF</code> options from Advance settings menu. If entered and configured properly, the value <code>36</code> should pop up in the Checksum field of the QConsole; then, click on the  button to send the message.</p> <pre><code>$PQTMCFGUART,R*\n</code></pre> <p>Once the message has been sent, keep a close watch of the messages in the console. It may help to click on the  button to disable auto-scrolling, when trying to locate the message response. Additionally, the response may not appear right away, it could be appended to the end of the next data packet, as shown in the image below.</p> <p>  Example of utilizing the Quectel PQTM messages in the QConsole.  </p>"},{"location":"software-lg290p/#pygpsclient","title":"PyGPSClient","text":"<p>Software Limitations</p> <p>With this software, users will only be able to view the data from the NMEA messages and connect to an NTRIP caster. Users will not be able to configure the LG290P module with the built-in console.</p> <p>As an alternative to QGNSS, for users with computers that run on MacOS or Linux, we recommend PyGPSClient as an option for viewing the data from the NMEA messages and connecting to an NTRIP caster. However, users should be aware that this GUI interface is currently limited to only receiving UART messages and cannot send messages to configure the LG290P module.</p> Resources <p>For additional information, users can refer to the following resources for the PyGPSClient software:</p> <ul> <li> GitHub Repository</li> <li>Installation Instructions</li> <li>PyPI Project</li> </ul>"},{"location":"software-lg290p/#installation","title":"Installation","text":"<p>There are a variety of installation methods detailed in the GitHub repository's <code>README.md</code> file. However, we recommend utilizing the <code>pip</code> installation method.</p> <p>Installation Commands</p> <p>Depending on how Python is installed on the computer, one of the following commands should allow users to install the software.</p> <ul> <li> <pre><code>python3 -m pip install pygpsclient\n</code></pre> </li> <li> <pre><code>pip install pygpsclient\n</code></pre> </li> </ul> <p>System Requirements</p> <p>This installation method requires an internet connection. Additionally, users will also need administrative privileges (or root access <code>sudo</code>) for the installation.</p>"},{"location":"software-lg290p/#connecting-to-the-lg290p_1","title":"Connecting to the LG290P","text":"<p>Before users can connect to the RTK Postcard, they will need to specify the settings of the UART port in PyGPSClient. Once configured, users can select the  button and PyGPSClient will automatically attempt to connect to the GNSS module.</p> <ul> <li>Below, is a list of the default settings for <code>UART</code> ports of the LG290P. These settings should be selected in the configuration menu.</li> <li>For the <code>Serial Port</code>, select the port labeled with channel <code>B</code> from the drop-down menu.</li> </ul> <p></p> <p>Specify the settings for the UART port in QGNSS.</p> <p>LG290P - Default Settings</p> <p>The UART ports of the LG290P GNSS module will have the following default configuration:</p> <ul> <li>Baudrate: 460800bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul>"},{"location":"software-lg290p/#terminal-emulator","title":"Terminal Emulator","text":"<p>Another viable option for connecting to the RTK Postcard, is to utilize a terminal emulation program. While reading the data sent from the LG290P is relatively trivial, users will need to be more selective when choosing an emulator to configure the LG290P module on the RTK Postcard. This is due to the unique data structure of the proprietary messages that Quectel implements to configure the LG290P (see the Configure the LG290P section, above).</p>"},{"location":"software_overview/","title":"Software Overview","text":""},{"location":"software_overview/#ch342-usb-driver","title":"CH342 USB Driver","text":"<p>The USB drivers for the CH342 USB-to-Serial converter can be downloaded from the manufacturer's website.</p> <ul> <li> <p> Windows</p> <p> Download Page for <code>CH343SER.EXE</code></p> </li> <li> <p> MacOS</p> <p> Download Page for <code>CH341SER_MAC.ZIP</code></p> </li> </ul> <p>Linux</p> <p>A USB driver is not required for Linux based operating systems.</p>"},{"location":"software_overview/#rtk-everywhere-firmware","title":"RTK Everywhere Firmware","text":"<p>The RTK Postcard comes preloaded with our latest RTK Everywhere firmware. Our firmware is completely open-source; therefore, users can view the code to troubleshoot issues, contribute new features or updates, and file issues for any bugs they discover. In addition, we also users with pre-compiled binaries in our SparkFun RTK Everywhere Firmware binaries GitHub repository and a RTK Firmware Uploader tool to upload the pre-compiled binaries to the RTK Postcard. For more information, users can reference the user manual for the RTK Everywhere firmware and associated links below:</p> <ul> <li>Compile the firmware</li> <li>Update the firmware</li> <li>RTK Firmware Uploader</li> </ul>"},{"location":"software_overview/#qgnss-software","title":"QGNSS Software","text":"<p>QGNSS is highly intuitive GNSS evaluation software that is easy to use, personalized, and compatible with leading Quectel technologies. The software allows users to define or apply GNSS product configurations for specific use cases. Saving, restoring, or sharing configurations between different products and updating the module's firmware are easy. The software supports product evaluation with a choice of views to observe static and dynamic behavior of the connected a Quectel GNSS receiver.</p>  [:octicons-download-16:{ .heart } Download the QGNSS Software *(v2.0)* from Quectel](https://www.quectel.com/download/qgnss_v2-0_en/){ .md-button .md-button--primary target=\"blank\" }  Windows Only <p>Currently, the QGNSS software is only available for Windows operating systems.</p>"},{"location":"software_overview/#connecting-to-the-lg290p","title":"Connecting to the LG290P","text":"<p>In order to connect to the LG290P properly, users will need to specify the settings of the UART port.</p> <p></p> <p>Click the  button to configure the UART settings.</p> <p>Before users can connect to the RTK Postcard, they will need to specify the connection settings in QGNSS. Once configured, users can select the OK button and QGNSS will automatically attempt to connect to the GNSS module.</p> <ul> <li>Select the <code>LG290P(03)</code> from the drop-down menu to configure the <code>Model</code> of the GNSS module being connected.</li> <li>Below, is a list of the default settings for <code>UART</code> ports of the LG290P. These settings should be selected in the <code>Device Information</code> menu, unless configured differently.</li> <li>When connecting through the USB-C connector, under the <code>Port</code> option, select the port labeled with channel <code>B</code> from the drop-down menu.</li> </ul> <p></p> <p>From the available <code>COM</code> ports for the CH342, select the port labeled <code>B</code> to access the LG290P GNSS receiver. Users will also need to specify the settings for the UART port.</p> <p>LG290P - Default Settings</p> <p>The UART ports of the LG290P GNSS module will have the following default configuration:</p> <ul> <li>Baudrate: 460800bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul>"},{"location":"software_overview/#arduino-ide","title":"Arduino IDE","text":"<p>Tip</p> <p>For first-time users, who have never programmed before and are looking to use the Arduino IDE, we recommend beginning with the SparkFun Inventor's Kit (SIK), which is designed to help users get started programming with the Arduino IDE.</p> <p>Most users may already be familiar with the Arduino IDE and its use. However, for those of you who have never heard the name Arduino before, feel free to check out the Arduino website. To get started with using the Arduino IDE, check out our tutorials below:</p> <ul> <li> <p> <p>What is an Arduino?</p> <li> <p> <p>Installing the Arduino IDE</p> <li> <p> <p>Installing Board Definitions in the Arduino IDE</p> <li> <p> <p>Installing an Arduino Library</p>"},{"location":"software_overview/#espressif-esp32-arduino-core","title":"Espressif ESP32 Arduino Core","text":"<p>The ESP32 Arduino Core can be installed from the board manager in the Arduino IDE by searching for:</p> <pre><code>esp32 by Espressif Systems\n</code></pre> <p></p> <p>The Espressif ESP32 Arduino core in the library manager of the Arduino IDE.</p> <p>Arduino Board Manager URL</p> <p>In order to install Espressif's ESP32 Arduino core, users must provide the Arduino Board Manager URL in the preferences settings (File &gt; Preferences) for the Arduino IDE:</p> <pre><code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n</code></pre> <p>Board Definition for RTK Postcard</p> <p>In order to program the ESP32 Pico-Mini module on the RTK Postcard, users should select the ESP32 Dev Module from the Tools &gt; Board: &gt; esp32 drop-down menu.</p>"},{"location":"software_overview/#sparkfun-lg290p-quadband-rtk-gnss-arduino-library","title":"SparkFun LG290P Quadband RTK GNSS Arduino Library","text":"<p>The SparkFun LG290P Quadband RTK GNSS Arduino Library can be installed from the library manager in the Arduino IDE by searching for:</p> <pre><code>SparkFun LG290P Quadband RTK GNSS Arduino Library\n</code></pre> <p></p> <p>SparkFun LG290P Quadband RTK GNSS Arduino Library in the library manager of the Arduino IDE.</p> <p>Manually Download the Arduino Library</p> <p>For users who would like to manually download and install the library, the <code>*.zip</code> file can be accessed from the GitHub repository or downloaded by clicking the button below.</p> <p>  Download the Arduino Library </p>"},{"location":"troubleshooting_tips/","title":"Troubleshooting Tips","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun GNSS Forum is a great place to ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p>  ![QR code to the hookup guide](./assets/img/qr_code/hookup_guide.png){ .qr }"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun RTK Postcard repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun RTK Postcard repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun RTK Postcard repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun RTK Postcard repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"}]}